paths:
  /databases:
    get:
      summary: Lists databases.
      description: Lists databases.
      parameters:
        - name: Authorization
          in: header
          type: string
          format: Bearer {access_token}
          required: true
      responses:
        "200":
          description: Response containing an array of databases.
          schema:
            type: array
            items:
              $ref: "#/definitions/Database"
        "400":
          description: Bad request.
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authorization information is missing or invalid.
          schema:
            $ref: "#/definitions/Error"
    post:
      summary: Creates a new database.
      description: Creates a new database.
      parameters:
        - name: Authorization
          in: header
          type: string
          format: Bearer {access_token}
          required: true
        - in: body
          name: body
          description: The database definition.
          required: true
          schema:
            $ref: "#/definitions/CreateDatabaseInput"
      responses:
        "200":
          description: Response containing the database definition.
          schema:
            $ref: "#/definitions/Database"
        "400":
          description: Bad request.
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authorization information is missing or invalid.
          schema:
            $ref: "#/definitions/Error"
  /databases/{id}:
    get:
      summary: Retrieve a database given its ID.
      description: Retrieve a database given its ID.
      parameters:
        - name: Authorization
          in: header
          type: string
          format: Bearer {access_token}
          required: true
        - name: id
          in: path
          description: ID of the database to retrieve.
          required: true
          type: string
          format: uuid
        - name: user_type
          in: query
          description: The user type whose credentials will be returned.
          required: false
          type: string
      responses:
        "200":
          description: Response containing the database definition.
          schema:
            $ref: "#/definitions/Database"
        "400":
          description: Bad request.
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authorization information is missing or invalid.
          schema:
            $ref: "#/definitions/Error"
    patch:
      summary: Updates a database.
      description: Updates a database.
      parameters:
        - name: Authorization
          in: header
          type: string
          format: Bearer {access_token}
          required: true
        - name: id
          in: path
          description: ID of the database to update.
          required: true
          type: string
          format: uuid
        - in: body
          name: body
          description: The database parameters to update.
          required: true
          schema:
            $ref: "#/definitions/UpdateDatabaseInput"
      responses:
        "200":
          description: Response containing the updated database definition.
          schema:
            $ref: "#/definitions/Database"
        "400":
          description: Bad request.
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authorization information is missing or invalid.
          schema:
            $ref: "#/definitions/Error"
    delete:
      summary: Deletes a database.
      description: Deletes a database.
      parameters:
        - name: Authorization
          in: header
          type: string
          format: Bearer {access_token}
          required: true
        - name: id
          in: path
          description: ID of the database to delete.
          required: true
          type: string
          format: uuid
      responses:
        "204":
          description: Empty response indicating that the database was deleted.
        "400":
          description: Bad request.
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authorization information is missing or invalid.
          schema:
            $ref: "#/definitions/Error"

definitions:
  CreateDatabaseInput:
    type: object
    required:
      - name
    properties:
      name:
        type: string
      cluster_id:
        type: string
        format: uuid
      config_version:
        type: string
      options:
        type: array
        items:
          type: string
      extensions:
        $ref: "#/definitions/Extensions"
      backups:
        $ref: "#/definitions/Backups"
  UpdateDatabaseInput:
    type: object
    properties:
      options:
        type: array
        items:
          type: string
      extensions:
        $ref: "#/definitions/Extensions"
      nodes:
        type: array
        items:
          $ref: "#/definitions/DatabaseNode"
  Database:
    type: object
    required:
      - id
      - cluster_id
      - name
      - status
      - created_at
      - updated_at
    properties:
      id:
        type: string
        format: uuid
      cluster_id:
        type: string
        format: uuid
      name:
        type: string
      status:
        type: string
      created_at:
        type: string
      updated_at:
        type: string
      pg_version:
        type: string
      storage_used:
        type: integer
        format: int64
      domain:
        type: string
      config_version:
        type: string
      tables:
        type: array
        items:
          $ref: "#/definitions/DatabaseTable"
      roles:
        type: array
        items:
          $ref: "#/definitions/DatabaseRole"
      nodes:
        type: array
        items:
          $ref: "#/definitions/DatabaseNode"
      components:
        type: array
        items:
          $ref: "#/definitions/DatabaseComponentVersion"
      options:
        type: array
        items:
          type: string
      extensions:
        $ref: "#/definitions/Extensions"
      backups:
        $ref: "#/definitions/Backups"
  Extensions:
    type: object
    required:
      - auto_manage
    properties:
      auto_manage:
        type: boolean
      available:
        type: array
        items:
          type: string
      requested:
        type: array
        items:
          type: string
  Backups:
    type: object
    required:
      - provider
    properties:
      provider:
        type: string
      config:
        type: array
        items:
          $ref: "#/definitions/BackupConfig"
  BackupConfig:
    type: object
    required:
      - id
    properties:
      id:
        type: string
      node_name:
        type: string
      schedules:
        type: array
        items:
          $ref: "#/definitions/BackupSchedule"
      repositories:
        type: array
        items:
          $ref: "#/definitions/BackupRepository"
  BackupSchedule:
    type: object
    required:
      - id
      - type
      - cron_expression
    properties:
      id:
        type: string
      type:
        type: string
      cron_expression:
        type: string
  BackupRepository:
    type: object
    properties:
      id:
        type: string
      database_id:
        type: string
        format: uuid
      created_at:
        type: string
      type:
        type: string
      backup_store_id:
        type: string
      base_path:
        type: string
      s3_bucket:
        type: string
      s3_region:
        type: string
      s3_endpoint:
        type: string
      gcs_bucket:
        type: string
      gcs_endpoint:
        type: string
      azure_account:
        type: string
      azure_container:
        type: string
      azure_endpoint:
        type: string
      retention_full:
        type: integer
      retention_full_type:
        type: string
  DatabaseNode:
    type: object
    required:
      - name
      - connection
      - location
    properties:
      name:
        type: string
      connection:
        $ref: "#/definitions/Connection"
      location:
        $ref: "#/definitions/Location"
      region:
        $ref: "#/definitions/Region"
      distance_measurement:
        $ref: "#/definitions/DistanceMeasurement"
      extensions:
        $ref: "#/definitions/DatabaseNodeExtensions"
  DatabaseNodeExtensions:
    type: object
    required:
      - installed
    properties:
      installed:
        type: array
        items:
          type: string
      errors:
        type: object
        additionalProperties:
          type: string
  DatabaseTable:
    type: object
    required:
      - schema
      - name
      - primary_key
      - replication_sets
      - status
    properties:
      schema:
        type: string
      name:
        type: string
      primary_key:
        type: array
        items:
          type: string
      replication_sets:
        type: array
        items:
          type: string
      columns:
        type: array
        items:
          $ref: "#/definitions/DatabaseColumn"
      status:
        type: array
        items:
          $ref: "#/definitions/DatabaseTableStatus"
  DatabaseTableStatus:
    type: object
    required:
      - node_name
      - present
      - aligned
      - replicating
    properties:
      node_name:
        type: string
      present:
        type: boolean
      aligned:
        type: boolean
      replicating:
        type: boolean
  DatabaseColumn:
    type: object
    required:
      - name
      - ordinal_position
      - data_type
      - default
      - is_nullable
      - is_primary_key
    properties:
      name:
        type: string
      ordinal_position:
        type: integer
      data_type:
        type: string
      default:
        type: string
      is_nullable:
        type: boolean
      is_primary_key:
        type: boolean
  DatabaseRole:
    type: object
    required:
      - name
      - connection_limit
      - superuser
      - create_role
      - create_db
      - login
      - inherit
      - replication
      - bypass_rls
    properties:
      name:
        type: string
      connection_limit:
        type: integer
      superuser:
        type: boolean
      create_role:
        type: boolean
      create_db:
        type: boolean
      login:
        type: boolean
      inherit:
        type: boolean
      replication:
        type: boolean
      bypass_rls:
        type: boolean
  DatabaseComponentVersion:
    type: object
    required:
      - id
      - name
      - version
      - release_date
      - status
    properties:
      id:
        type: string
        format: uuid
      name:
        type: string
      version:
        type: string
      release_date:
        type: string
      status:
        type: string
  Connection:
    type: object
    required:
      - username
      - password
      - port
      - database
    properties:
      username:
        type: string
      password:
        type: string
      host:
        type: string
      internal_host:
        type: string
      external_ip_address:
        type: string
      internal_ip_address:
        type: string
      port:
        type: integer
      database:
        type: string
  Error:
    type: object
    properties:
      code:
        type: integer
      message:
        type: string