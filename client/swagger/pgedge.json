{
  "components": {
    "schemas": {
      "AccessToken": {
        "properties": {
          "access_token": {
            "type": "string"
          },
          "expires_in": {
            "type": "integer"
          },
          "token_type": {
            "type": "string"
          }
        },
        "required": [
          "token_type",
          "access_token",
          "expires_in"
        ],
        "type": "object"
      },
      "AccessTokenRequest": {
        "properties": {
          "client_id": {
            "type": "string"
          },
          "client_secret": {
            "type": "string"
          },
          "grant_type": {
            "example": "client_credentials",
            "type": "string"
          }
        },
        "required": [
          "client_id",
          "client_secret"
        ],
        "type": "object"
      },
      "ApiClient": {
        "properties": {
          "auth0_id": {
            "type": "string"
          },
          "auth0_secret": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "description",
          "created_at",
          "updated_at",
          "auth0_id"
        ],
        "type": "object"
      },
      "AvailableCluster": {
        "properties": {
          "id": {
            "type": "string"
          },
          "locations": {
            "items": {
              "$ref": "#/components/schemas/Location"
            },
            "type": "array"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "locations"
        ],
        "type": "object"
      },
      "AwsCredentials": {
        "properties": {
          "role_arn": {
            "type": "string"
          }
        },
        "required": [
          "role_arn"
        ],
        "type": "object"
      },
      "AzureCredentials": {
        "properties": {
          "client_id": {
            "type": "string"
          },
          "client_secret": {
            "type": "string"
          },
          "resource_group": {
            "type": "string"
          },
          "subscription_id": {
            "type": "string"
          },
          "tenant_id": {
            "type": "string"
          }
        },
        "required": [
          "tenant_id",
          "subscription_id",
          "client_id",
          "client_secret"
        ],
        "type": "object"
      },
      "Backup": {
        "properties": {
          "bucket": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "database_id": {
            "type": "string"
          },
          "date_key": {
            "type": "string"
          },
          "finished_at": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "metadata": {
            "type": "object"
          },
          "name": {
            "type": "string"
          },
          "size": {
            "format": "int64",
            "type": "integer"
          },
          "status": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "database_id",
          "name",
          "created_at",
          "status",
          "kind",
          "metadata",
          "size"
        ],
        "type": "object"
      },
      "BackupConfig": {
        "properties": {
          "id": {
            "type": "string"
          },
          "node_name": {
            "type": "string"
          },
          "repositories": {
            "items": {
              "$ref": "#/components/schemas/BackupRepository"
            },
            "type": "array"
          },
          "schedules": {
            "items": {
              "$ref": "#/components/schemas/BackupSchedule"
            },
            "type": "array"
          }
        },
        "required": [
          "id"
        ],
        "type": "object"
      },
      "BackupLink": {
        "properties": {
          "url": {
            "type": "string"
          }
        },
        "required": [
          "url"
        ],
        "type": "object"
      },
      "BackupRepository": {
        "properties": {
          "azure_account": {
            "type": "string"
          },
          "azure_container": {
            "type": "string"
          },
          "azure_endpoint": {
            "type": "string"
          },
          "backup_store_id": {
            "type": "string"
          },
          "base_path": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "database_id": {
            "type": "string"
          },
          "gcs_bucket": {
            "type": "string"
          },
          "gcs_endpoint": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "retention_full": {
            "type": "integer"
          },
          "retention_full_type": {
            "type": "string"
          },
          "s3_bucket": {
            "type": "string"
          },
          "s3_endpoint": {
            "type": "string"
          },
          "s3_region": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "BackupSchedule": {
        "properties": {
          "cron_expression": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "type",
          "cron_expression"
        ],
        "type": "object"
      },
      "BackupStore": {
        "properties": {
          "cloud_account_id": {
            "description": "The ID of the cloud account used for the backup store.",
            "type": "string"
          },
          "cloud_account_type": {
            "description": "The type of the cloud account used for the backup store.",
            "type": "string"
          },
          "cluster_ids": {
            "description": "The IDs of the clusters that use the backup store.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "created_at": {
            "description": "The time the backup store was created.",
            "type": "string"
          },
          "id": {
            "description": "The ID of the backup store.",
            "type": "string"
          },
          "name": {
            "description": "The name of the backup store.",
            "type": "string"
          },
          "properties": {
            "description": "The computed properties of the backup store.",
            "type": "object"
          },
          "status": {
            "description": "The status of the backup store.",
            "type": "string"
          },
          "updated_at": {
            "description": "The time the backup store was last updated.",
            "type": "string"
          }
        },
        "required": [
          "id",
          "cloud_account_id",
          "cloud_account_type",
          "created_at",
          "updated_at",
          "status",
          "name"
        ],
        "type": "object"
      },
      "Backups": {
        "properties": {
          "config": {
            "items": {
              "$ref": "#/components/schemas/BackupConfig"
            },
            "type": "array"
          },
          "provider": {
            "type": "string"
          }
        },
        "required": [
          "provider"
        ],
        "type": "object"
      },
      "CloudAccount": {
        "properties": {
          "created_at": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "properties": {
            "additionalProperties": true,
            "type": "object"
          },
          "type": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "name",
          "type",
          "properties"
        ],
        "type": "object"
      },
      "CloudAccountProperties": {
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "type": "object"
      },
      "CloudFormationTemplate": {
        "properties": {
          "url": {
            "type": "string"
          }
        },
        "required": [
          "url"
        ],
        "type": "object"
      },
      "Cluster": {
        "properties": {
          "backup_store_ids": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "capacity": {
            "type": "integer"
          },
          "cloud_account": {
            "$ref": "#/components/schemas/CloudAccountProperties"
          },
          "created_at": {
            "type": "string"
          },
          "firewall_rules": {
            "items": {
              "$ref": "#/components/schemas/ClusterFirewallRuleSettings"
            },
            "type": "array"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "networks": {
            "items": {
              "$ref": "#/components/schemas/ClusterNetworkSettings"
            },
            "type": "array"
          },
          "node_location": {
            "type": "string"
          },
          "nodes": {
            "items": {
              "$ref": "#/components/schemas/ClusterNodeSettings"
            },
            "type": "array"
          },
          "regions": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "resource_tags": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "ssh_key_id": {
            "type": "string"
          },
          "status": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "status",
          "created_at",
          "regions",
          "cloud_account",
          "node_location"
        ],
        "type": "object"
      },
      "ClusterFirewallRuleSettings": {
        "properties": {
          "name": {
            "type": "string"
          },
          "port": {
            "type": "integer"
          },
          "sources": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "port",
          "sources"
        ],
        "type": "object"
      },
      "ClusterNetworkSettings": {
        "properties": {
          "cidr": {
            "type": "string"
          },
          "external": {
            "type": "boolean"
          },
          "external_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "private_subnets": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "public_subnets": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "region": {
            "type": "string"
          }
        },
        "required": [
          "region"
        ],
        "type": "object"
      },
      "ClusterNode": {
        "properties": {
          "availability_zone": {
            "type": "string"
          },
          "display_name": {
            "type": "string"
          },
          "distance_measurement": {
            "$ref": "#/components/schemas/DistanceMeasurement"
          },
          "id": {
            "type": "string"
          },
          "image_id": {
            "type": "string"
          },
          "instance_id": {
            "type": "string"
          },
          "instance_type": {
            "type": "string"
          },
          "ip_address": {
            "type": "string"
          },
          "is_active": {
            "type": "boolean"
          },
          "key_name": {
            "type": "string"
          },
          "location": {
            "$ref": "#/components/schemas/Location"
          },
          "name": {
            "type": "string"
          },
          "public_ip_address": {
            "type": "string"
          },
          "region": {
            "type": "string"
          },
          "region_detail": {
            "$ref": "#/components/schemas/Region"
          },
          "volume_iops": {
            "type": "integer"
          },
          "volume_size": {
            "type": "integer"
          },
          "volume_type": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "availability_zone",
          "image_id",
          "instance_id",
          "instance_type",
          "ip_address",
          "is_active",
          "key_name",
          "name",
          "region",
          "region_detail",
          "volume_size",
          "volume_type",
          "volume_iops",
          "location"
        ],
        "type": "object"
      },
      "ClusterNodeLogMessage": {
        "properties": {
          "level": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "raw_text": {
            "type": "string"
          },
          "time": {
            "type": "string"
          }
        },
        "required": [
          "time",
          "level",
          "message",
          "raw_text"
        ],
        "type": "object"
      },
      "ClusterNodeSettings": {
        "properties": {
          "availability_zone": {
            "type": "string"
          },
          "instance_type": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "options": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "region": {
            "type": "string"
          },
          "volume_iops": {
            "type": "integer"
          },
          "volume_size": {
            "type": "integer"
          },
          "volume_type": {
            "type": "string"
          }
        },
        "required": [
          "region"
        ],
        "type": "object"
      },
      "ClusterShare": {
        "properties": {
          "allowed_tenants": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "capacity": {
            "type": "integer"
          },
          "created_at": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "tenancy": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "status",
          "capacity",
          "created_at",
          "updated_at",
          "tenancy",
          "allowed_tenants"
        ],
        "type": "object"
      },
      "ConfigVersion": {
        "properties": {
          "images": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "managed_extensions": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "name": {
            "type": "string"
          },
          "supported_pg_versions": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "Connection": {
        "properties": {
          "database": {
            "type": "string"
          },
          "external_ip_address": {
            "type": "string"
          },
          "host": {
            "type": "string"
          },
          "internal_host": {
            "type": "string"
          },
          "internal_ip_address": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "port": {
            "type": "integer"
          },
          "username": {
            "type": "string"
          }
        },
        "required": [
          "username",
          "password",
          "port",
          "database"
        ],
        "type": "object"
      },
      "CreateApiClientInput": {
        "properties": {
          "description": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "description"
        ],
        "type": "object"
      },
      "CreateBackupInput": {
        "properties": {
          "name": {
            "type": "string"
          },
          "provider": {
            "type": "string"
          },
          "target_nodes": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": {
            "type": "string"
          }
        },
        "required": [
          "provider"
        ],
        "type": "object"
      },
      "CreateBackupStoreInput": {
        "properties": {
          "cloud_account_id": {
            "description": "The ID of the cloud account to use for the backup store.",
            "type": "string"
          },
          "name": {
            "description": "The name of the backup store.",
            "type": "string"
          },
          "region": {
            "description": "The region to use for the backup store.",
            "type": "string"
          }
        },
        "required": [
          "name",
          "cloud_account_id"
        ],
        "type": "object"
      },
      "CreateCloudAccountInput": {
        "properties": {
          "credentials": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AwsCredentials"
              },
              {
                "$ref": "#/components/schemas/AzureCredentials"
              },
              {
                "$ref": "#/components/schemas/GoogleCredentials"
              }
            ]
          },
          "description": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "required": [
          "type",
          "credentials"
        ],
        "type": "object"
      },
      "CreateClusterInput": {
        "properties": {
          "backup_store_ids": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "capacity": {
            "type": "integer"
          },
          "cloud_account": {
            "$ref": "#/components/schemas/CloudAccountProperties"
          },
          "cloud_account_id": {
            "type": "string"
          },
          "firewall_rules": {
            "items": {
              "$ref": "#/components/schemas/ClusterFirewallRuleSettings"
            },
            "type": "array"
          },
          "name": {
            "type": "string"
          },
          "networks": {
            "items": {
              "$ref": "#/components/schemas/ClusterNetworkSettings"
            },
            "type": "array"
          },
          "node_location": {
            "type": "string"
          },
          "nodes": {
            "items": {
              "$ref": "#/components/schemas/ClusterNodeSettings"
            },
            "type": "array"
          },
          "regions": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "resource_tags": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "ssh_key_id": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "regions",
          "node_location"
        ],
        "type": "object"
      },
      "CreateClusterShareInput": {
        "properties": {
          "allowed_tenants": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "capacity": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "tenancy": {
            "enum": [
              "same",
              "allowlist"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "CreateDatabaseInput": {
        "properties": {
          "backups": {
            "$ref": "#/components/schemas/Backups"
          },
          "cluster_id": {
            "type": "string"
          },
          "config_version": {
            "type": "string"
          },
          "display_name": {
            "description": "Display name for the database. Optional.\nMust not exceed 25 characters.\n",
            "maxLength": 25,
            "nullable": true,
            "type": "string"
          },
          "extensions": {
            "$ref": "#/components/schemas/Extensions"
          },
          "name": {
            "type": "string"
          },
          "options": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "pg_version": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "CreateInviteInput": {
        "properties": {
          "email": {
            "type": "string"
          },
          "expiration": {
            "type": "integer"
          }
        },
        "required": [
          "email"
        ],
        "type": "object"
      },
      "CreateRestoreInput": {
        "properties": {
          "provider": {
            "type": "string"
          },
          "restore_command": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PgBackrestRestoreCommand"
              },
              {
                "$ref": "#/components/schemas/PgDumpRestoreCommand"
              }
            ]
          },
          "restore_config": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PgBackrestRestoreConfig"
              },
              {
                "$ref": "#/components/schemas/PgDumpRestoreConfig"
              }
            ]
          },
          "target_nodes": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "provider",
          "restore_config"
        ],
        "type": "object"
      },
      "CreateSshKeyInput": {
        "properties": {
          "name": {
            "description": "The name of the SSH key.",
            "type": "string"
          },
          "public_key": {
            "description": "The public key of the SSH key pair.",
            "type": "string"
          }
        },
        "required": [
          "name",
          "public_key"
        ],
        "type": "object"
      },
      "Database": {
        "properties": {
          "backups": {
            "$ref": "#/components/schemas/Backups"
          },
          "cluster_id": {
            "type": "string"
          },
          "components": {
            "items": {
              "$ref": "#/components/schemas/DatabaseComponentVersion"
            },
            "type": "array"
          },
          "config_version": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "display_name": {
            "description": "Display name of the database. Will be null if not set.",
            "maxLength": 25,
            "nullable": true,
            "type": "string"
          },
          "domain": {
            "type": "string"
          },
          "extensions": {
            "$ref": "#/components/schemas/Extensions"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "nodes": {
            "items": {
              "$ref": "#/components/schemas/DatabaseNode"
            },
            "type": "array"
          },
          "options": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "pg_version": {
            "type": "string"
          },
          "private_domain": {
            "type": "string"
          },
          "roles": {
            "items": {
              "$ref": "#/components/schemas/DatabaseRole"
            },
            "type": "array"
          },
          "status": {
            "type": "string"
          },
          "storage_used": {
            "format": "int64",
            "type": "integer"
          },
          "tables": {
            "items": {
              "$ref": "#/components/schemas/DatabaseTable"
            },
            "type": "array"
          },
          "updated_at": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "cluster_id",
          "name",
          "status",
          "created_at",
          "updated_at"
        ],
        "type": "object"
      },
      "DatabaseColumn": {
        "properties": {
          "data_type": {
            "type": "string"
          },
          "default": {
            "type": "string"
          },
          "is_nullable": {
            "type": "boolean"
          },
          "is_primary_key": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "ordinal_position": {
            "type": "integer"
          }
        },
        "required": [
          "name",
          "ordinal_position",
          "data_type",
          "default",
          "is_nullable",
          "is_primary_key"
        ],
        "type": "object"
      },
      "DatabaseComponentVersion": {
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "release_date": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "version",
          "release_date",
          "status"
        ],
        "type": "object"
      },
      "DatabaseLogsResponse": {
        "properties": {
          "logs": {
            "items": {
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "logs"
        ],
        "type": "object"
      },
      "DatabaseNode": {
        "properties": {
          "connection": {
            "$ref": "#/components/schemas/Connection"
          },
          "distance_measurement": {
            "$ref": "#/components/schemas/DistanceMeasurement"
          },
          "extensions": {
            "$ref": "#/components/schemas/DatabaseNodeExtensions"
          },
          "location": {
            "$ref": "#/components/schemas/Location"
          },
          "name": {
            "type": "string"
          },
          "region": {
            "$ref": "#/components/schemas/Region"
          }
        },
        "required": [
          "name",
          "connection",
          "location"
        ],
        "type": "object"
      },
      "DatabaseNodeExtensions": {
        "properties": {
          "errors": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "installed": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "installed"
        ],
        "type": "object"
      },
      "DatabaseRole": {
        "properties": {
          "bypass_rls": {
            "type": "boolean"
          },
          "connection_limit": {
            "type": "integer"
          },
          "create_db": {
            "type": "boolean"
          },
          "create_role": {
            "type": "boolean"
          },
          "inherit": {
            "type": "boolean"
          },
          "login": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "replication": {
            "type": "boolean"
          },
          "superuser": {
            "type": "boolean"
          }
        },
        "required": [
          "name",
          "connection_limit",
          "superuser",
          "create_role",
          "create_db",
          "login",
          "inherit",
          "replication",
          "bypass_rls"
        ],
        "type": "object"
      },
      "DatabaseTable": {
        "properties": {
          "columns": {
            "items": {
              "$ref": "#/components/schemas/DatabaseColumn"
            },
            "type": "array"
          },
          "name": {
            "type": "string"
          },
          "primary_key": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "replication_sets": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "schema": {
            "type": "string"
          },
          "status": {
            "items": {
              "$ref": "#/components/schemas/DatabaseTableStatus"
            },
            "type": "array"
          }
        },
        "required": [
          "schema",
          "name",
          "primary_key",
          "replication_sets",
          "status"
        ],
        "type": "object"
      },
      "DatabaseTableStatus": {
        "properties": {
          "aligned": {
            "type": "boolean"
          },
          "node_name": {
            "type": "string"
          },
          "present": {
            "type": "boolean"
          },
          "replicating": {
            "type": "boolean"
          }
        },
        "required": [
          "node_name",
          "present",
          "aligned",
          "replicating"
        ],
        "type": "object"
      },
      "DistanceMeasurement": {
        "properties": {
          "distance": {
            "format": "double",
            "type": "number"
          },
          "from_latitude": {
            "format": "double",
            "type": "number"
          },
          "from_longitude": {
            "format": "double",
            "type": "number"
          },
          "unit": {
            "type": "string"
          }
        },
        "required": [
          "distance",
          "unit",
          "from_latitude",
          "from_longitude"
        ],
        "type": "object"
      },
      "Error": {
        "properties": {
          "code": {
            "type": "integer"
          },
          "message": {
            "type": "string"
          }
        },
        "required": [
          "code",
          "message"
        ],
        "type": "object"
      },
      "Extensions": {
        "properties": {
          "auto_manage": {
            "type": "boolean"
          },
          "available": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "requested": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GoogleCredentials": {
        "properties": {
          "project_id": {
            "type": "string"
          },
          "provider": {
            "type": "string"
          },
          "service_account": {
            "type": "string"
          }
        },
        "required": [
          "project_id",
          "service_account",
          "provider"
        ],
        "type": "object"
      },
      "Invite": {
        "properties": {
          "accept_url": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "expires_at": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "invited_by": {
            "type": "string"
          },
          "screen_hint": {
            "type": "string"
          },
          "team_name": {
            "type": "string"
          },
          "token": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "email",
          "created_at",
          "updated_at",
          "expires_at",
          "team_name"
        ],
        "type": "object"
      },
      "Location": {
        "properties": {
          "city": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "latitude": {
            "format": "double",
            "type": "number"
          },
          "longitude": {
            "format": "double",
            "type": "number"
          },
          "metro_code": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "postal_code": {
            "type": "string"
          },
          "region": {
            "type": "string"
          },
          "region_code": {
            "type": "string"
          },
          "timezone": {
            "type": "string"
          }
        },
        "required": [
          "latitude",
          "longitude"
        ],
        "type": "object"
      },
      "Membership": {
        "properties": {
          "created_at": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          },
          "user_email": {
            "type": "string"
          },
          "user_id": {
            "type": "string"
          },
          "user_name": {
            "type": "string"
          },
          "user_picture": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "user_id",
          "user_name",
          "user_email",
          "created_at",
          "updated_at"
        ],
        "type": "object"
      },
      "Message": {
        "properties": {
          "level": {
            "type": "string"
          },
          "progress": {
            "type": "integer"
          },
          "status": {
            "type": "string"
          },
          "step": {
            "type": "string"
          },
          "text": {
            "type": "string"
          },
          "time": {
            "type": "string"
          }
        },
        "required": [
          "time",
          "level",
          "text"
        ],
        "type": "object"
      },
      "Metric": {
        "properties": {
          "end": {
            "format": "int64",
            "type": "integer"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/MetricItem"
            },
            "type": "array"
          },
          "name": {
            "type": "string"
          },
          "start": {
            "format": "int64",
            "type": "integer"
          },
          "type": {
            "type": "string"
          },
          "unit": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "type",
          "unit",
          "items",
          "start",
          "end"
        ],
        "type": "object"
      },
      "MetricItem": {
        "properties": {
          "name": {
            "type": "string"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/MetricResource"
            },
            "type": "array"
          },
          "value": {
            "format": "double",
            "type": "number"
          },
          "values": {
            "items": {
              "items": {
                "format": "double",
                "type": "number"
              },
              "type": "array"
            },
            "type": "array"
          }
        },
        "required": [
          "name",
          "resources",
          "value",
          "values"
        ],
        "type": "object"
      },
      "MetricResource": {
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "required": [
          "type",
          "id",
          "name"
        ],
        "type": "object"
      },
      "MetricSeries": {
        "properties": {
          "columns": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "name": {
            "type": "string"
          },
          "values": {
            "items": {
              "items": {},
              "type": "array"
            },
            "type": "array"
          }
        },
        "required": [
          "name",
          "values",
          "columns"
        ],
        "type": "object"
      },
      "MetricSeriesContainer": {
        "properties": {
          "series": {
            "items": {
              "$ref": "#/components/schemas/MetricSeries"
            },
            "type": "array"
          }
        },
        "required": [
          "series"
        ],
        "type": "object"
      },
      "Metrics": {
        "additionalProperties": {
          "$ref": "#/components/schemas/Metric"
        },
        "type": "object"
      },
      "OpenApiSpec": {
        "type": "object"
      },
      "PgBackrestBackupInfo": {
        "properties": {
          "annotations": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "backup_set_size": {
            "type": "integer"
          },
          "backup_size": {
            "type": "integer"
          },
          "created_at": {
            "type": "string"
          },
          "database_backup_size": {
            "type": "integer"
          },
          "database_size": {
            "type": "integer"
          },
          "error": {
            "type": "boolean"
          },
          "error_list": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "finished_at": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "lsn_start": {
            "type": "string"
          },
          "lsn_stop": {
            "type": "string"
          },
          "pgbackrest_format": {
            "type": "integer"
          },
          "pgbackrest_version": {
            "type": "string"
          },
          "prior": {
            "type": "string"
          },
          "references": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": {
            "type": "string"
          },
          "wal_start": {
            "type": "string"
          },
          "wal_stop": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PgBackrestRepositoryInfo": {
        "properties": {
          "archive_max_wal": {
            "type": "string"
          },
          "archive_min_wal": {
            "type": "string"
          },
          "backup_repository_id": {
            "type": "string"
          },
          "backups": {
            "items": {
              "$ref": "#/components/schemas/PgBackrestBackupInfo"
            },
            "type": "array"
          },
          "database_id": {
            "type": "string"
          },
          "node_name": {
            "type": "string"
          },
          "pg_system_id": {
            "type": "integer"
          },
          "pg_version": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "status_code": {
            "type": "integer"
          },
          "status_message": {
            "type": "string"
          }
        },
        "required": [
          "database_id",
          "backup_repository_id",
          "node_name"
        ],
        "type": "object"
      },
      "PgBackrestRestoreCommand": {
        "properties": {
          "delta": {
            "type": "boolean"
          },
          "force": {
            "type": "boolean"
          },
          "set": {
            "type": "string"
          },
          "target": {
            "type": "string"
          },
          "target_exclusive": {
            "type": "boolean"
          },
          "type": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PgBackrestRestoreConfig": {
        "properties": {
          "node_name": {
            "type": "string"
          },
          "repositories": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "node_name",
          "repositories"
        ],
        "type": "object"
      },
      "PgDumpRestoreCommand": {
        "properties": {
          "schema_only": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "PgDumpRestoreConfig": {
        "properties": {
          "backup_id": {
            "type": "string"
          }
        },
        "required": [
          "backup_id"
        ],
        "type": "object"
      },
      "Region": {
        "properties": {
          "active": {
            "type": "boolean"
          },
          "availability_zones": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "cloud": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "parent": {
            "type": "string"
          }
        },
        "required": [
          "cloud",
          "code",
          "name",
          "availability_zones"
        ],
        "type": "object"
      },
      "SshKey": {
        "properties": {
          "created_at": {
            "description": "The date and time when the SSH key was created.",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the SSH key.",
            "type": "string"
          },
          "name": {
            "description": "The name of the SSH key.",
            "type": "string"
          },
          "public_key": {
            "description": "The public key of the SSH key.",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "public_key",
          "created_at"
        ],
        "type": "object"
      },
      "TableQueryResponse": {
        "properties": {
          "count": {
            "type": "integer"
          },
          "rows": {
            "items": {
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "rows",
          "count"
        ],
        "type": "object"
      },
      "Task": {
        "properties": {
          "created_at": {
            "type": "string"
          },
          "error": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "messages": {
            "items": {
              "$ref": "#/components/schemas/Message"
            },
            "type": "array"
          },
          "name": {
            "type": "string"
          },
          "request": {
            "additionalProperties": {},
            "type": "object"
          },
          "response": {
            "additionalProperties": {},
            "type": "object"
          },
          "status": {
            "type": "string"
          },
          "subject_id": {
            "type": "string"
          },
          "subject_kind": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "subject_kind",
          "subject_id",
          "name",
          "messages",
          "status"
        ],
        "type": "object"
      },
      "Tenant": {
        "properties": {
          "created_at": {
            "type": "string"
          },
          "domain": {
            "type": "string"
          },
          "external_id": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "plan": {
            "type": "string"
          },
          "plan_expires_at": {
            "type": "string"
          },
          "plan_trial": {
            "type": "boolean"
          },
          "updated_at": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "name"
        ],
        "type": "object"
      },
      "UpdateApiClientInput": {
        "properties": {
          "description": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "UpdateClusterInput": {
        "properties": {
          "backup_store_ids": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "firewall_rules": {
            "items": {
              "$ref": "#/components/schemas/ClusterFirewallRuleSettings"
            },
            "type": "array"
          },
          "networks": {
            "items": {
              "$ref": "#/components/schemas/ClusterNetworkSettings"
            },
            "type": "array"
          },
          "nodes": {
            "items": {
              "$ref": "#/components/schemas/ClusterNodeSettings"
            },
            "type": "array"
          },
          "regions": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "resource_tags": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          }
        },
        "required": [
          "regions"
        ],
        "type": "object"
      },
      "UpdateDatabaseInput": {
        "properties": {
          "display_name": {
            "description": "Display name for the database. Optional.\nSet to empty string to remove existing display name.\nMust not exceed 25 characters.\n",
            "maxLength": 25,
            "nullable": true,
            "type": "string"
          },
          "extensions": {
            "$ref": "#/components/schemas/Extensions"
          },
          "nodes": {
            "items": {
              "$ref": "#/components/schemas/DatabaseNode"
            },
            "type": "array"
          },
          "options": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "UpdateTenantInput": {
        "properties": {
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "UpdateUserInput": {
        "properties": {
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "User": {
        "properties": {
          "created_at": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "first_name": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "picture": {
            "type": "string"
          },
          "tenants": {
            "items": {
              "$ref": "#/components/schemas/Tenant"
            },
            "type": "array"
          },
          "updated_at": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "email",
          "tenants"
        ],
        "type": "object"
      }
    },
    "securitySchemes": {
      "AccessToken": {
        "bearerFormat": "JWT",
        "scheme": "bearer",
        "type": "http"
      }
    }
  },
  "info": {
    "description": "pgEdge API",
    "license": {
      "name": "pgEdge Community License",
      "url": "https://github.com/pgEdge/nodectl/blob/main/PGEDGE-COMMUNITY-LICENSE.md"
    },
    "title": "pgEdge API",
    "version": "1.0.0"
  },
  "openapi": "3.0.0",
  "paths": {
    "/available-clusters": {
      "get": {
        "description": "List available clusters.",
        "operationId": "listAvailableClusters",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/AvailableCluster"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Response containing a list of clusters."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Bad request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unexpected error."
          }
        },
        "security": [
          {
            "AccessToken": []
          }
        ],
        "summary": "List available clusters.",
        "tags": [
          "clusters"
        ]
      }
    },
    "/backup-repositories": {
      "get": {
        "description": "List backup repositories.",
        "operationId": "listBackupRepositories",
        "parameters": [
          {
            "description": "Filter backup repositories to a specific database ID.",
            "in": "query",
            "name": "database_id",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Filter backup repositories to a specific type.",
            "in": "query",
            "name": "type",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Start time for backup repository retrieval as an RFC3339 timestamp.",
            "in": "query",
            "name": "created_after",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "End time for backup repository retrieval as an RFC3339 timestamp.",
            "in": "query",
            "name": "created_before",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Maximum number of results to return.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Offset into the results for pagination.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Sort in descending order.",
            "in": "query",
            "name": "descending",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/BackupRepository"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Response containing a list of backup repositories."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Bad request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unexpected error."
          }
        },
        "security": [
          {
            "AccessToken": []
          }
        ],
        "summary": "List backup repositories.",
        "tags": [
          "backup-repositories"
        ]
      },
      "x-pgedge-plan": [
        "enterprise"
      ]
    },
    "/backup-repositories/{id}/{node_name}": {
      "get": {
        "description": "Retrieve backup repository info for a node.",
        "operationId": "getBackupRepositoryInfo",
        "parameters": [
          {
            "description": "Backup repository ID.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the node.",
            "in": "path",
            "name": "node_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Maximum number of backups to return.",
            "in": "query",
            "name": "backup_limit",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Offset into the backups, for pagination.",
            "in": "query",
            "name": "backup_offset",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Filter backups by type.",
            "in": "query",
            "name": "backup_type",
            "required": false,
            "schema": {
              "enum": [
                "full",
                "incr",
                "diff"
              ],
              "type": "string"
            }
          },
          {
            "description": "Sort backups in descending order.",
            "in": "query",
            "name": "descending",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PgBackrestRepositoryInfo"
                }
              }
            },
            "description": "Response containing repository details for the specified node."
          },
          "204": {
            "description": "Empty response indicating the repository contains no data for the specified node."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Bad request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unexpected error."
          }
        },
        "security": [
          {
            "AccessToken": []
          }
        ],
        "summary": "Retrieve backup repository info for a node.",
        "tags": [
          "backup-repositories"
        ]
      },
      "x-pgedge-plan": [
        "enterprise"
      ]
    },
    "/backup-stores": {
      "get": {
        "description": "List backup stores.",
        "operationId": "listBackupStores",
        "parameters": [
          {
            "description": "Start time for backup store retrieval as an RFC3339 timestamp.",
            "in": "query",
            "name": "created_after",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "End time for backup store retrieval as an RFC3339 timestamp.",
            "in": "query",
            "name": "created_before",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Maximum number of results to return.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Offset into the results for pagination.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Sort in descending order.",
            "in": "query",
            "name": "descending",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/BackupStore"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Response containing a list of backup stores."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Bad request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unexpected error."
          }
        },
        "security": [
          {
            "AccessToken": []
          }
        ],
        "summary": "List backup stores.",
        "tags": [
          "backup-stores"
        ]
      },
      "post": {
        "description": "Create a backup store.",
        "operationId": "createBackupStore",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBackupStoreInput"
              }
            }
          },
          "description": "The backup store details.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BackupStore"
                }
              }
            },
            "description": "Response containing details about the newly created backup store."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Bad request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unexpected error."
          }
        },
        "security": [
          {
            "AccessToken": []
          }
        ],
        "summary": "Create a backup store.",
        "tags": [
          "backup-stores"
        ]
      },
      "x-pgedge-plan": [
        "enterprise"
      ]
    },
    "/backup-stores/{id}": {
      "delete": {
        "description": "Delete a backup store.",
        "operationId": "deleteBackupStore",
        "parameters": [
          {
            "description": "The ID of the backup store to delete.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response indicating that the backup store deletion was initiated."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Bad request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unexpected error."
          }
        },
        "security": [
          {
            "AccessToken": []
          }
        ],
        "summary": "Delete a backup store.",
        "tags": [
          "backup-stores"
        ]
      },
      "get": {
        "description": "Retrieve a backup store.",
        "operationId": "getBackupStore",
        "parameters": [
          {
            "description": "The ID of the backup store to get.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BackupStore"
                }
              }
            },
            "description": "Response containing details about the specified backup store."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Bad request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unexpected error."
          }
        },
        "security": [
          {
            "AccessToken": []
          }
        ],
        "summary": "Retrieve a backup store.",
        "tags": [
          "backup-stores"
        ]
      },
      "x-pgedge-plan": [
        "enterprise"
      ]
    },
    "/backups": {
      "get": {
        "description": "List backups.",
        "operationId": "listBackups",
        "parameters": [
          {
            "description": "Filter backups to a specific database ID.",
            "in": "query",
            "name": "database_id",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Filter backups to a specific kind.",
            "in": "query",
            "name": "kind",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Start time for backup retrieval as an RFC3339 timestamp.",
            "in": "query",
            "name": "created_after",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "End time for backup retrieval as an RFC3339 timestamp.",
            "in": "query",
            "name": "created_before",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Maximum number of results to return.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Offset into the results for pagination.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Sort in descending order.",
            "in": "query",
            "name": "descending",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Backup"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Response containing a list of backups."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Bad request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unexpected error."
          }
        },
        "security": [
          {
            "AccessToken": []
          }
        ],
        "summary": "List backups.",
        "tags": [
          "backups"
        ]
      }
    },
    "/backups/{id}": {
      "delete": {
        "description": "Delete a backup.",
        "operationId": "deleteBackup",
        "parameters": [
          {
            "description": "ID of the backup to delete.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response indicating that the backup was deleted."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Bad request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unexpected error."
          }
        },
        "security": [
          {
            "AccessToken": []
          }
        ],
        "summary": "Delete a backup.",
        "tags": [
          "backups"
        ]
      },
      "get": {
        "description": "Retrieve a backup.",
        "operationId": "getBackup",
        "parameters": [
          {
            "description": "ID of the backup to retrieve.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Backup"
                }
              }
            },
            "description": "Response containing the backup."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Bad request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unexpected error."
          }
        },
        "security": [
          {
            "AccessToken": []
          }
        ],
        "summary": "Retrieve a backup.",
        "tags": [
          "backups"
        ]
      }
    },
    "/backups/{id}/url": {
      "post": {
        "description": "Retrieve a download link for a backup.",
        "operationId": "getBackupLink",
        "parameters": [
          {
            "description": "ID of the backup to retrieve a download link for.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BackupLink"
                }
              }
            },
            "description": "Response containing the download link for a backup."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Bad request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unexpected error."
          }
        },
        "security": [
          {
            "AccessToken": []
          }
        ],
        "summary": "Retrieve a download link for a backup.",
        "tags": [
          "backups"
        ]
      }
    },
    "/clients": {
      "get": {
        "description": "List API clients.",
        "operationId": "listClients",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ApiClient"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Response containing a list of clients."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Bad request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unexpected error."
          }
        },
        "security": [
          {
            "AccessToken": []
          }
        ],
        "summary": "List API clients.",
        "tags": [
          "clients"
        ]
      },
      "post": {
        "description": "Create an API client.",
        "operationId": "createClient",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateApiClientInput"
              }
            }
          },
          "description": "The client attributes.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiClient"
                }
              }
            },
            "description": "Response containing the client details."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Bad request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unexpected error."
          }
        },
        "security": [
          {
            "AccessToken": []
          }
        ],
        "summary": "Create an API client.",
        "tags": [
          "clients"
        ]
      }
    },
    "/clients/{id}": {
      "delete": {
        "description": "Delete an API client.",
        "operationId": "deleteClient",
        "parameters": [
          {
            "description": "ID of the client to delete.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response indicating that the client was deleted."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Bad request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unexpected error."
          }
        },
        "security": [
          {
            "AccessToken": []
          }
        ],
        "summary": "Delete an API client.",
        "tags": [
          "clients"
        ]
      },
      "get": {
        "description": "Retrieve an API client.",
        "operationId": "getClient",
        "parameters": [
          {
            "description": "ID of the client to retrieve.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiClient"
                }
              }
            },
            "description": "Response containing the client definition."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Bad request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unexpected error."
          }
        },
        "security": [
          {
            "AccessToken": []
          }
        ],
        "summary": "Retrieve an API client.",
        "tags": [
          "clients"
        ]
      },
      "patch": {
        "description": "Update an API client.",
        "operationId": "updateClient",
        "parameters": [
          {
            "description": "ID of the client to update.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateApiClientInput"
              }
            }
          },
          "description": "The client attributes to update.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiClient"
                }
              }
            },
            "description": "Response containing the updated client details."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Bad request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unexpected error."
          }
        },
        "security": [
          {
            "AccessToken": []
          }
        ],
        "summary": "Update an API client.",
        "tags": [
          "clients"
        ]
      }
    },
    "/cloud-accounts": {
      "get": {
        "description": "List cloud accounts.",
        "operationId": "listCloudAccounts",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/CloudAccount"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Response containing a list of cloud accounts."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Bad request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unexpected error."
          }
        },
        "security": [
          {
            "AccessToken": []
          }
        ],
        "summary": "List cloud accounts.",
        "tags": [
          "cloud-accounts"
        ]
      },
      "post": {
        "description": "Create a cloud account.",
        "operationId": "createCloudAccount",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCloudAccountInput"
              }
            }
          },
          "description": "The cloud account details.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CloudAccount"
                }
              }
            },
            "description": "Response containing details about the newly created cloud account."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Bad request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unexpected error."
          }
        },
        "security": [
          {
            "AccessToken": []
          }
        ],
        "summary": "Create a cloud account.",
        "tags": [
          "cloud-accounts"
        ]
      },
      "x-pgedge-plan": [
        "enterprise"
      ]
    },
    "/cloud-accounts/{id}": {
      "delete": {
        "description": "Delete a cloud account.",
        "operationId": "deleteCloudAccount",
        "parameters": [
          {
            "description": "ID of the cloud account to delete.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response indicating that the cloud account deletion was initiated."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Bad request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unexpected error."
          }
        },
        "security": [
          {
            "AccessToken": []
          }
        ],
        "summary": "Delete a cloud account.",
        "tags": [
          "cloud-accounts"
        ]
      },
      "get": {
        "description": "Retrieve a cloud account.",
        "operationId": "getCloudAccount",
        "parameters": [
          {
            "description": "ID of the cloud account to retrieve.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CloudAccount"
                }
              }
            },
            "description": "Response containing details about the specified cloud account."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Bad request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unexpected error."
          }
        },
        "security": [
          {
            "AccessToken": []
          }
        ],
        "summary": "Retrieve a cloud account.",
        "tags": [
          "cloud-accounts"
        ]
      },
      "x-pgedge-plan": [
        "enterprise"
      ]
    },
    "/clusters": {
      "get": {
        "description": "List clusters.",
        "operationId": "listClusters",
        "parameters": [
          {
            "description": "Start time for cluster retrieval as an RFC3339 timestamp.",
            "in": "query",
            "name": "created_after",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "End time for cluster retrieval as an RFC3339 timestamp.",
            "in": "query",
            "name": "created_before",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Maximum number of results to return.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Offset into the results for pagination.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Sort in descending order.",
            "in": "query",
            "name": "descending",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Cluster"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Response containing a list of clusters."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Bad request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unexpected error."
          }
        },
        "security": [
          {
            "AccessToken": []
          }
        ],
        "summary": "List clusters.",
        "tags": [
          "clusters"
        ]
      },
      "post": {
        "description": "Create a cluster.",
        "operationId": "createCluster",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateClusterInput"
              }
            }
          },
          "description": "The cluster definition.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cluster"
                }
              }
            },
            "description": "Response containing details about the newly created cluster."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Bad request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unexpected error."
          }
        },
        "security": [
          {
            "AccessToken": []
          }
        ],
        "summary": "Create a cluster.",
        "tags": [
          "clusters"
        ]
      },
      "x-pgedge-plan": [
        "enterprise"
      ]
    },
    "/clusters/{id}": {
      "delete": {
        "description": "Delete a cluster.",
        "operationId": "deleteCluster",
        "parameters": [
          {
            "description": "ID of the cluster to delete.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response indicating that the cluster deletion was initiated."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Bad request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unexpected error."
          }
        },
        "security": [
          {
            "AccessToken": []
          }
        ],
        "summary": "Delete a cluster.",
        "tags": [
          "clusters"
        ]
      },
      "get": {
        "description": "Retrieve a cluster.",
        "operationId": "getCluster",
        "parameters": [
          {
            "description": "ID of the cluster to retrieve.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cluster"
                }
              }
            },
            "description": "Response containing details about the specified cluster."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Bad request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unexpected error."
          }
        },
        "security": [
          {
            "AccessToken": []
          }
        ],
        "summary": "Retrieve a cluster.",
        "tags": [
          "clusters"
        ]
      },
      "patch": {
        "description": "Update a cluster.",
        "operationId": "updateCluster",
        "parameters": [
          {
            "description": "ID of the cluster to update.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateClusterInput"
              }
            }
          },
          "description": "The cluster definition.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cluster"
                }
              }
            },
            "description": "Response containing details about the updated cluster."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Bad request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "security": [
          {
            "AccessToken": []
          }
        ],
        "summary": "Update a cluster.",
        "tags": [
          "clusters"
        ]
      },
      "x-pgedge-plan": [
        "enterprise"
      ]
    },
    "/clusters/{id}/metrics": {
      "get": {
        "description": "Retrieve metrics for a cluster.",
        "operationId": "readClusterMetrics",
        "parameters": [
          {
            "description": "ID of the cluster whose metrics should be retrieved.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Start time for metrics retrieval.",
            "in": "query",
            "name": "start_time",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "End time for metrics retrieval.",
            "in": "query",
            "name": "end_time",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Metrics"
                }
              }
            },
            "description": "Response containing metrics data for the specified cluster."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Bad request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unexpected error."
          }
        },
        "security": [
          {
            "AccessToken": []
          }
        ],
        "summary": "Retrieve metrics for a cluster.",
        "tags": [
          "clusters"
        ]
      },
      "x-pgedge-plan": [
        "enterprise"
      ]
    },
    "/clusters/{id}/nodes": {
      "get": {
        "description": "List nodes for a cluster.",
        "operationId": "listClusterNodes",
        "parameters": [
          {
            "description": "ID of the cluster.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Latitude of the caller.",
            "in": "query",
            "name": "near_lat",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Longitude of the caller.",
            "in": "query",
            "name": "near_lon",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Order by specification.",
            "in": "query",
            "name": "order_by",
            "schema": {
              "enum": [
                "distance"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ClusterNode"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Response containing a list of nodes in the specified cluster."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Bad request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unexpected error."
          }
        },
        "security": [
          {
            "AccessToken": []
          }
        ],
        "summary": "List nodes for a cluster.",
        "tags": [
          "clusters"
        ]
      },
      "x-pgedge-plan": [
        "enterprise"
      ]
    },
    "/clusters/{id}/nodes/{node_id}/logs/{log_name}": {
      "get": {
        "description": "Retrieve logs for a cluster node.",
        "operationId": "getClusterLogs",
        "parameters": [
          {
            "description": "ID of the cluster.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "ID of the node to get logs for.",
            "in": "path",
            "name": "node_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the cluster log file.",
            "in": "path",
            "name": "log_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Maximum number of log lines to retrieve.",
            "in": "query",
            "name": "lines",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Show entries on or after the specified date.",
            "in": "query",
            "name": "since",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Show entries on or before than the specified date.",
            "in": "query",
            "name": "until",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The message priority to filter the log files by.",
            "in": "query",
            "name": "priority",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter output to entries where the message field matches the provided regular expression.",
            "in": "query",
            "name": "grep",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "If set to true, make pattern matching case-sensitive; the default is false (case-insensitive).",
            "in": "query",
            "name": "case_sensitive",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Reverse output so that the newest entries are displayed first.",
            "in": "query",
            "name": "reverse",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Show only kernel entries.",
            "in": "query",
            "name": "dmesg",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Controls the formatting of the journal entries that are shown.",
            "in": "query",
            "name": "output",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ClusterNodeLogMessage"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Response containing cluster logs for the specified node."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Bad request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unexpected error."
          }
        },
        "security": [
          {
            "AccessToken": []
          }
        ],
        "summary": "Retrieve logs for a cluster node.",
        "tags": [
          "clusters"
        ]
      },
      "x-pgedge-plan": [
        "enterprise"
      ]
    },
    "/clusters/{id}/shares": {
      "get": {
        "description": "List shares for a cluster.",
        "operationId": "listClusterShares",
        "parameters": [
          {
            "description": "ID of the cluster.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ClusterShare"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Response containing a list of shares for a specified cluster."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Bad request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unexpected error."
          }
        },
        "security": [
          {
            "AccessToken": []
          }
        ],
        "summary": "List shares for a cluster.",
        "tags": [
          "clusters"
        ]
      },
      "post": {
        "description": "Share a cluster with a different tenant.",
        "operationId": "createClusterShare",
        "parameters": [
          {
            "description": "ID of the cluster.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateClusterShareInput"
              }
            }
          },
          "description": "The cluster share definition.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterShare"
                }
              }
            },
            "description": "Response containing details about the newly created cluster share."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Bad request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unexpected error."
          }
        },
        "security": [
          {
            "AccessToken": []
          }
        ],
        "summary": "Share a cluster with a different tenant.",
        "tags": [
          "clusters"
        ]
      },
      "x-pgedge-plan": [
        "enterprise"
      ]
    },
    "/clusters/{id}/shares/{share_id}": {
      "delete": {
        "description": "Delete a cluster share.",
        "operationId": "deleteClusterShare",
        "parameters": [
          {
            "description": "ID of the cluster.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "ID of the cluster share.",
            "in": "path",
            "name": "share_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response indicating the cluster share was deleted."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Bad request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unexpected error."
          }
        },
        "security": [
          {
            "AccessToken": []
          }
        ],
        "summary": "Delete a cluster share.",
        "tags": [
          "clusters"
        ]
      },
      "get": {
        "description": "Retrieve a cluster share.",
        "operationId": "readClusterShare",
        "parameters": [
          {
            "description": "ID of the cluster.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "ID of the cluster share.",
            "in": "path",
            "name": "share_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterShare"
                }
              }
            },
            "description": "Response containing details about the specified cluster share."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Bad request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unexpected error."
          }
        },
        "security": [
          {
            "AccessToken": []
          }
        ],
        "summary": "Retrieve a cluster share.",
        "tags": [
          "clusters"
        ]
      },
      "x-pgedge-plan": [
        "enterprise"
      ]
    },
    "/config-versions": {
      "get": {
        "description": "List database configuration versions.",
        "operationId": "listConfigVersions",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ConfigVersion"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Response containing a list of database configuration versions."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Bad request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unexpected error."
          }
        },
        "security": [
          {
            "AccessToken": []
          }
        ],
        "summary": "List database configuration versions.",
        "tags": [
          "config-versions"
        ]
      }
    },
    "/config-versions/{version}": {
      "get": {
        "description": "Retrieve a database configuration version.",
        "operationId": "getConfigVersion",
        "parameters": [
          {
            "description": "Configuration version to return.",
            "in": "path",
            "name": "version",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigVersion"
                }
              }
            },
            "description": "Response containing a specific configuration version."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Bad request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unexpected error."
          }
        },
        "security": [
          {
            "AccessToken": []
          }
        ],
        "summary": "Retrieve a database configuration version.",
        "tags": [
          "config-versions"
        ]
      }
    },
    "/databases": {
      "get": {
        "description": "List databases.",
        "operationId": "listDatabases",
        "parameters": [
          {
            "description": "Filter databases to a specific cluster ID.",
            "in": "query",
            "name": "cluster_id",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Start time for database retrieval as an RFC3339 timestamp.",
            "in": "query",
            "name": "created_after",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "End time for database retrieval as an RFC3339 timestamp.",
            "in": "query",
            "name": "created_before",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Maximum number of results to return.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Offset into the results for pagination.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Sort in descending order.",
            "in": "query",
            "name": "descending",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Database"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Response containing a list of databases."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Bad request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unexpected error."
          }
        },
        "security": [
          {
            "AccessToken": []
          }
        ],
        "summary": "List databases.",
        "tags": [
          "databases"
        ]
      },
      "post": {
        "description": "Create a database.",
        "operationId": "createDatabase",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDatabaseInput"
              }
            }
          },
          "description": "The database definition.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Database"
                }
              }
            },
            "description": "Response containing details about the newly created database."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Bad request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unexpected error."
          }
        },
        "security": [
          {
            "AccessToken": []
          }
        ],
        "summary": "Create a database.",
        "tags": [
          "databases"
        ]
      }
    },
    "/databases/{id}": {
      "delete": {
        "description": "Delete a database.",
        "operationId": "deleteDatabase",
        "parameters": [
          {
            "description": "ID of the database to delete.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response indicating that the database deletion was initiated."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Bad request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unexpected error."
          }
        },
        "security": [
          {
            "AccessToken": []
          }
        ],
        "summary": "Delete a database.",
        "tags": [
          "databases"
        ]
      },
      "get": {
        "description": "Retrieve a database.",
        "operationId": "getDatabase",
        "parameters": [
          {
            "description": "ID of the database to retrieve.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The user type whose credentials will be returned.",
            "in": "query",
            "name": "user_type",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Database"
                }
              }
            },
            "description": "Response containing the database definition."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Bad request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unexpected error."
          }
        },
        "security": [
          {
            "AccessToken": []
          }
        ],
        "summary": "Retrieve a database.",
        "tags": [
          "databases"
        ]
      },
      "patch": {
        "description": "Update a database.",
        "operationId": "updateDatabase",
        "parameters": [
          {
            "description": "ID of the database to update.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDatabaseInput"
              }
            }
          },
          "description": "The database parameters to update.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Database"
                }
              }
            },
            "description": "Response containing the updated database definition."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Bad request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unexpected error."
          }
        },
        "security": [
          {
            "AccessToken": []
          }
        ],
        "summary": "Update a database.",
        "tags": [
          "databases"
        ]
      }
    },
    "/databases/{id}/backup": {
      "post": {
        "description": "Initiate a backup for a database.",
        "operationId": "backupDatabase",
        "parameters": [
          {
            "description": "ID of the database to backup.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBackupInput"
              }
            }
          },
          "description": "The backup configuration.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Empty response indicating a backup was initiated."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Bad request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unexpected error."
          }
        },
        "security": [
          {
            "AccessToken": []
          }
        ],
        "summary": "Initiate a backup for a database.",
        "tags": [
          "databases"
        ]
      }
    },
    "/databases/{id}/logs": {
      "get": {
        "description": "Retrieve logs for a database.",
        "operationId": "getDatabaseLogs",
        "parameters": [
          {
            "description": "ID of the database.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the database to get logs for.",
            "in": "query",
            "name": "component_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Maximum number of log lines to retrieve.",
            "in": "query",
            "name": "max_lines",
            "required": false,
            "schema": {
              "default": 100,
              "type": "integer"
            }
          },
          {
            "description": "List of node(s) to get logs for.",
            "in": "query",
            "name": "nodes",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/DatabaseLogsResponse"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Response containing logs for the specified database."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Bad request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unexpected error."
          }
        },
        "security": [
          {
            "AccessToken": []
          }
        ],
        "summary": "Retrieve logs for a database.",
        "tags": [
          "databases"
        ]
      }
    },
    "/databases/{id}/metrics": {
      "get": {
        "description": "Retrieve metrics for a database.",
        "operationId": "getDatabaseMetrics",
        "parameters": [
          {
            "description": "ID of the database.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The interval to group the metrics by, specified in value, unit format.",
            "in": "query",
            "name": "interval",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The node name to filter the metrics by.",
            "in": "query",
            "name": "node_name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The columns to return, comma separated.",
            "in": "query",
            "name": "columns",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricSeriesContainer"
                }
              }
            },
            "description": "Response containing metrics for the specified database."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Bad request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unexpected error."
          }
        },
        "security": [
          {
            "AccessToken": []
          }
        ],
        "summary": "Retrieve metrics for a database.",
        "tags": [
          "databases"
        ]
      }
    },
    "/databases/{id}/replicate": {
      "post": {
        "description": "Initiate replication for a database.",
        "operationId": "replicateDatabase",
        "parameters": [
          {
            "description": "ID of the database to replicate.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Empty response indicating that replication was initiated."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Bad request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unexpected error."
          }
        },
        "security": [
          {
            "AccessToken": []
          }
        ],
        "summary": "Initiate replication for a database.",
        "tags": [
          "databases"
        ]
      }
    },
    "/databases/{id}/restore": {
      "post": {
        "description": "Initiate a restore for a database.",
        "operationId": "restoreDatabase",
        "parameters": [
          {
            "description": "ID of the database to restore.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRestoreInput"
              }
            }
          },
          "description": "The restore configuration.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Empty response indicating a restore was initiated."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Bad request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "security": [
          {
            "AccessToken": []
          }
        ],
        "summary": "Initiate a restore for a database.",
        "tags": [
          "databases"
        ]
      }
    },
    "/databases/{id}/roles/{role_name}/rotate-password": {
      "post": {
        "description": "Rotate the password for a built-in database role.",
        "operationId": "rotateDatabaseRolePassword",
        "parameters": [
          {
            "description": "ID of the database.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the built-in role.",
            "in": "path",
            "name": "role_name",
            "required": true,
            "schema": {
              "enum": [
                "admin",
                "app",
                "app_read_only"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response indicating the password rotation was successful."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Bad request. The provided role is not a built-in role."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Internal server error. The password rotate operation failed."
          }
        },
        "security": [
          {
            "AccessToken": []
          }
        ],
        "summary": "Rotate the password for a built-in database role.",
        "tags": [
          "databases"
        ]
      }
    },
    "/databases/{id}/table-query": {
      "get": {
        "description": "Run a query against a database table.",
        "operationId": "queryDatabaseTable",
        "parameters": [
          {
            "description": "ID of the database.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The table name.",
            "in": "query",
            "name": "table",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The schema name.",
            "in": "query",
            "name": "schema",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The maximum number of rows to return.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The number of rows to skip.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The column to order by.",
            "in": "query",
            "name": "order_by",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Sort results in descending order.",
            "in": "query",
            "name": "descending",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "The WHERE clause and values to inject in JSON string format.",
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TableQueryResponse"
                }
              }
            },
            "description": "Response containing rows that satisfy the specified query."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Bad request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unexpected error."
          }
        },
        "security": [
          {
            "AccessToken": []
          }
        ],
        "summary": "Run a query against a database table.",
        "tags": [
          "databases"
        ]
      }
    },
    "/invites": {
      "get": {
        "description": "List invites.",
        "operationId": "listInvites",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Invite"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Response containing a list of invites."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Bad request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unexpected error."
          }
        },
        "security": [
          {
            "AccessToken": []
          }
        ],
        "summary": "List invites.",
        "tags": [
          "invites"
        ]
      },
      "post": {
        "description": "Create an invite.",
        "operationId": "createInvite",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateInviteInput"
              }
            }
          },
          "description": "The invite specification.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invite"
                }
              }
            },
            "description": "Response containing details about the newly created invite."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Bad request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unexpected error."
          }
        },
        "security": [
          {
            "AccessToken": []
          }
        ],
        "summary": "Create an invite.",
        "tags": [
          "invites"
        ]
      }
    },
    "/invites/{id}": {
      "delete": {
        "description": "Delete an invite.",
        "operationId": "deleteInvite",
        "parameters": [
          {
            "description": "ID of the invite to delete.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response indicating that the invite was deleted."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Bad request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unexpected error."
          }
        },
        "security": [
          {
            "AccessToken": []
          }
        ],
        "summary": "Delete an invite.",
        "tags": [
          "invites"
        ]
      },
      "get": {
        "description": "Retrieve an invite.",
        "operationId": "getInvite",
        "parameters": [
          {
            "description": "ID of the invite to retrieve.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invite"
                }
              }
            },
            "description": "Response containing details about the specified invite."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Bad request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unexpected error."
          }
        },
        "security": [
          {
            "AccessToken": []
          }
        ],
        "summary": "Retrieve an invite.",
        "tags": [
          "invites"
        ]
      }
    },
    "/invites/{id}/accept": {
      "post": {
        "description": "Accept an invite.",
        "operationId": "acceptInvite",
        "parameters": [
          {
            "description": "ID of the invite to accept.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Invite token.",
            "in": "query",
            "name": "invite_token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response indicating that the invite was accepted."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Bad request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unexpected error."
          }
        },
        "security": [
          {
            "AccessToken": []
          }
        ],
        "summary": "Accept an invite.",
        "tags": [
          "invites"
        ]
      },
      "x-pgedge-omit-public": true
    },
    "/memberships": {
      "get": {
        "description": "List user memberships.",
        "operationId": "listMemberships",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Membership"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Response containing a list of user memberships."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Bad request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unexpected error."
          }
        },
        "security": [
          {
            "AccessToken": []
          }
        ],
        "summary": "List user memberships.",
        "tags": [
          "memberships"
        ]
      }
    },
    "/memberships/{id}": {
      "delete": {
        "description": "Delete a user membership.",
        "operationId": "deleteMembership",
        "parameters": [
          {
            "description": "ID of the membership to delete.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response indicating that the user membership was deleted."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Bad request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unexpected error."
          }
        },
        "security": [
          {
            "AccessToken": []
          }
        ],
        "summary": "Delete a user membership.",
        "tags": [
          "memberships"
        ]
      }
    },
    "/oauth/token": {
      "post": {
        "description": "Generate an access token.",
        "operationId": "generateAccessToken",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccessTokenRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/AccessTokenRequest"
              }
            }
          },
          "description": "The access token request.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessToken"
                }
              }
            },
            "description": "Response containing the generated access token."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Bad request."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unexpected error."
          }
        },
        "security": [],
        "summary": "Generate an access token.",
        "tags": [
          "oauth"
        ]
      }
    },
    "/open-api": {
      "get": {
        "description": "Retrieve the OpenAPI specification for the pgEdge API.",
        "operationId": "getOpenApiSpec",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenApiSpec"
                }
              }
            },
            "description": "Response containing the OpenAPI specification for the pgEdge API in JSON format."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unexpected error."
          }
        },
        "security": [
          {
            "AccessToken": []
          }
        ],
        "summary": "Retrieve the OpenAPI specification for the pgEdge API.",
        "tags": [
          "open-api"
        ]
      }
    },
    "/ssh-keys": {
      "get": {
        "description": "List SSH keys.",
        "operationId": "listSshKeys",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/SshKey"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Response containing a list of SSH keys."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Bad request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unexpected error."
          }
        },
        "security": [
          {
            "AccessToken": []
          }
        ],
        "summary": "List SSH keys.",
        "tags": [
          "ssh-keys"
        ]
      },
      "post": {
        "description": "Create an SSH key.",
        "operationId": "createSshKey",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSshKeyInput"
              }
            }
          },
          "description": "The SSH key details.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SshKey"
                }
              }
            },
            "description": "Response containing details about the newly created SSH key."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Bad request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unexpected error."
          }
        },
        "security": [
          {
            "AccessToken": []
          }
        ],
        "summary": "Create an SSH key.",
        "tags": [
          "ssh-keys"
        ]
      },
      "x-pgedge-plan": [
        "enterprise"
      ]
    },
    "/ssh-keys/{id}": {
      "delete": {
        "description": "Delete an SSH key.",
        "operationId": "deleteSshKey",
        "parameters": [
          {
            "description": "ID of the SSH key to delete.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response indicating that the SSH key was deleted."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Bad request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unexpected error."
          }
        },
        "security": [
          {
            "AccessToken": []
          }
        ],
        "summary": "Delete an SSH key.",
        "tags": [
          "ssh-keys"
        ]
      },
      "get": {
        "description": "Retrieve an SSH key.",
        "operationId": "getSshKey",
        "parameters": [
          {
            "description": "ID of the SSH key to retrieve.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SshKey"
                }
              }
            },
            "description": "Response containing details about the specified SSH key."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Bad request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unexpected error."
          }
        },
        "security": [
          {
            "AccessToken": []
          }
        ],
        "summary": "Retrieve an SSH key.",
        "tags": [
          "ssh-keys"
        ]
      },
      "x-pgedge-plan": [
        "enterprise"
      ]
    },
    "/tasks": {
      "get": {
        "description": "List tasks.",
        "operationId": "listTasks",
        "parameters": [
          {
            "description": "Filter tasks by subject id.",
            "in": "query",
            "name": "subject_id",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter tasks by kind.",
            "in": "query",
            "name": "subject_kind",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter tasks by id.",
            "in": "query",
            "name": "id",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter tasks by name.",
            "in": "query",
            "name": "name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter tasks by status.",
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "enum": [
                "queued",
                "running",
                "succeeded",
                "failed"
              ],
              "type": "string"
            }
          },
          {
            "description": "Maximum number of results to return.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Offset into the results for pagination.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Task"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Response containing a list of tasks."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Bad request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unexpected error."
          }
        },
        "security": [
          {
            "AccessToken": []
          }
        ],
        "summary": "List tasks.",
        "tags": [
          "tasks"
        ]
      }
    },
    "/templates/permissions/cloudformation": {
      "get": {
        "description": "Retrieve a link to a CloudFormation template for pgEdge permissions.",
        "operationId": "getCloudFormationTemplate",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/CloudFormationTemplate"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Response containing a link to the CloudFormation template."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unexpected error."
          }
        },
        "security": [
          {
            "AccessToken": []
          }
        ],
        "summary": "Retrieve a link to a CloudFormation template for pgEdge permissions.",
        "tags": [
          "templates"
        ]
      },
      "x-pgedge-plan": [
        "enterprise"
      ]
    },
    "/tenants": {
      "get": {
        "description": "List tenants.",
        "operationId": "listTenants",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Tenant"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Response to list tenants."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Bad request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unexpected error."
          }
        },
        "security": [
          {
            "AccessToken": []
          }
        ],
        "summary": "List tenants.",
        "tags": [
          "tenants"
        ]
      }
    },
    "/tenants/{id}": {
      "get": {
        "description": "Retrieve a tenant.",
        "operationId": "getTenant",
        "parameters": [
          {
            "description": "ID of the tenant to retrieve.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tenant"
                }
              }
            },
            "description": "Response containing details about the specified tenant."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Bad request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unexpected error."
          }
        },
        "security": [
          {
            "AccessToken": []
          }
        ],
        "summary": "Retrieve a tenant.",
        "tags": [
          "tenants"
        ]
      },
      "patch": {
        "description": "Update a tenant.",
        "operationId": "updateTenant",
        "parameters": [
          {
            "description": "ID of the tenant to update.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTenantInput"
              }
            }
          },
          "description": "The tenant attributes to update.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tenant"
                }
              }
            },
            "description": "Response containing details about the updated tenant."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Bad request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unexpected error."
          }
        },
        "security": [
          {
            "AccessToken": []
          }
        ],
        "summary": "Update a tenant.",
        "tags": [
          "tenants"
        ]
      }
    },
    "/users/me": {
      "get": {
        "description": "Retrieve the current user.",
        "operationId": "getCurrentUser",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/User"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Response containing details about the current user."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Bad request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unexpected error."
          }
        },
        "security": [
          {
            "AccessToken": []
          }
        ],
        "summary": "Retrieve the current user.",
        "tags": [
          "users"
        ]
      },
      "patch": {
        "description": "Update the current user.",
        "operationId": "updateCurrentUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserInput"
              }
            }
          },
          "description": "The user attributes to update.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            },
            "description": "Response containing details about the updated user."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Bad request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unexpected error."
          }
        },
        "security": [
          {
            "AccessToken": []
          }
        ],
        "summary": "Update the current user.",
        "tags": [
          "users"
        ]
      }
    }
  },
  "servers": [
    {
      "url": "https://api.pgedge.com"
    }
  ],
  "tags": [
    {
      "name": "backup-repositories"
    },
    {
      "name": "backup-stores"
    },
    {
      "name": "backups"
    },
    {
      "name": "clients"
    },
    {
      "name": "cloud-accounts"
    },
    {
      "name": "clusters"
    },
    {
      "name": "config-versions"
    },
    {
      "name": "databases"
    },
    {
      "name": "invites"
    },
    {
      "name": "memberships"
    },
    {
      "name": "oauth"
    },
    {
      "name": "open-api"
    },
    {
      "name": "ssh-keys"
    },
    {
      "name": "tasks"
    },
    {
      "name": "templates"
    },
    {
      "name": "tenants"
    },
    {
      "name": "users"
    }
  ]
}
