definitions:
  AwsCredentials:
    properties:
      role_arn:
        type: string
    required:
    - role_arn
    type: object
  AzureCredentials:
    properties:
      client_id:
        type: string
      client_secret:
        type: string
      resource_group:
        type: string
      subscription_id:
        type: string
      tenant_id:
        type: string
    required:
    - tenant_id
    - subscription_id
    - client_id
    - client_secret
    type: object
  BackupConfig:
    properties:
      id:
        format: uuid
        type: string
      node_name:
        type: string
      repositories:
        items:
          $ref: '#/definitions/BackupRepository'
        type: array
      schedules:
        items:
          $ref: '#/definitions/BackupSchedule'
        type: array
    required:
    - id
    type: object
  BackupRepository:
    properties:
      azure_account:
        type: string
      azure_container:
        type: string
      azure_endpoint:
        type: string
      backup_store_id:
        format: uuid
        type: string
      base_path:
        type: string
      created_at:
        type: string
      database_id:
        format: uuid
        type: string
      gcs_bucket:
        type: string
      gcs_endpoint:
        type: string
      id:
        format: uuid
        type: string
      retention_full:
        type: integer
      retention_full_type:
        type: string
      s3_bucket:
        type: string
      s3_endpoint:
        type: string
      s3_region:
        type: string
      type:
        type: string
    type: object
  BackupSchedule:
    properties:
      cron_expression:
        type: string
      id:
        format: uuid
        type: string
      type:
        type: string
    required:
    - id
    - type
    - cron_expression
    type: object
  Backups:
    properties:
      config:
        items:
          $ref: '#/definitions/BackupConfig'
        type: array
      provider:
        type: string
    required:
    - provider
    type: object
  CloudAccount:
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        format: uuid
        type: string
      name:
        type: string
      properties:
        additionalProperties: true
        type: object
      type:
        type: string
      updated_at:
        type: string
    required:
    - id
    - created_at
    - updated_at
    - name
    - type
    - properties
    type: object
  CloudAccountProperties:
    properties:
      id:
        type: string
      name:
        type: string
      type:
        type: string
    required:
    - id
    type: object
  Cluster:
    properties:
      backup_store_ids:
        items:
          type: string
        type: array
      capacity:
        type: integer
      cloud_account:
        $ref: '#/definitions/CloudAccountProperties'
      created_at:
        type: string
      firewall_rules:
        items:
          $ref: '#/definitions/ClusterFirewallRuleSettings'
        type: array
      id:
        format: uuid
        type: string
      name:
        type: string
      networks:
        items:
          $ref: '#/definitions/ClusterNetworkSettings'
        type: array
      node_location:
        type: string
      nodes:
        items:
          $ref: '#/definitions/ClusterNodeSettings'
        type: array
      regions:
        items:
          type: string
        type: array
      resource_tags:
        additionalProperties:
          type: string
        type: object
      ssh_key_id:
        type: string
      status:
        type: string
    required:
    - id
    - name
    - status
    - created_at
    - regions
    - cloud_account
    - node_location
    type: object
  ClusterFirewallRuleSettings:
    properties:
      name:
        type: string
      port:
        type: integer
      sources:
        items:
          type: string
        type: array
    required:
    - port
    - sources
    type: object
  ClusterNetworkSettings:
    properties:
      cidr:
        type: string
      external:
        type: boolean
      external_id:
        type: string
      name:
        type: string
      private_subnets:
        items:
          type: string
        type: array
      public_subnets:
        items:
          type: string
        type: array
      region:
        type: string
    required:
    - region
    type: object
  ClusterNode:
    properties:
      availability_zone:
        type: string
      display_name:
        type: string
      distance_measurement:
        $ref: '#/definitions/DistanceMeasurement'
      id:
        type: string
      image_id:
        type: string
      instance_id:
        type: string
      instance_type:
        type: string
      ip_address:
        type: string
      is_active:
        type: boolean
      key_name:
        type: string
      location:
        $ref: '#/definitions/Location'
      name:
        type: string
      pg_version:
        type: string
      public_ip_address:
        type: string
      region:
        type: string
      region_detail:
        $ref: '#/definitions/Region'
      volume_iops:
        type: integer
      volume_size:
        type: integer
      volume_type:
        type: string
    required:
    - id
    - availability_zone
    - image_id
    - instance_id
    - instance_type
    - ip_address
    - is_active
    - key_name
    - name
    - pg_version
    - region
    - region_detail
    - volume_size
    - volume_type
    - volume_iops
    - location
    type: object
  ClusterNodeLogMessage:
    properties:
      level:
        type: string
      message:
        type: string
      raw_text:
        type: string
      time:
        type: string
    required:
    - time
    - level
    - message
    - raw_text
    type: object
  ClusterNodeSettings:
    properties:
      availability_zone:
        type: string
      image:
        type: string
      instance_type:
        type: string
      name:
        type: string
      options:
        items:
          type: string
        type: array
      region:
        type: string
      volume_iops:
        type: integer
      volume_size:
        type: integer
      volume_type:
        type: string
    required:
    - region
    type: object
  Connection:
    properties:
      database:
        type: string
      external_ip_address:
        type: string
      host:
        type: string
      internal_host:
        type: string
      internal_ip_address:
        type: string
      password:
        type: string
      port:
        type: integer
      username:
        type: string
    required:
    - username
    - password
    - port
    - database
    type: object
  CreateCloudAccountInput:
    properties:
      credentials:
        additionalProperties: true
        type: object
      description:
        type: string
      name:
        type: string
      type:
        type: string
    required:
    - type
    - credentials
    type: object
  CreateClusterInput:
    properties:
      backup_store_ids:
        items:
          type: string
        type: array
      capacity:
        type: integer
      cloud_account:
        $ref: '#/definitions/CloudAccountProperties'
      cloud_account_id:
        type: string
      firewall_rules:
        items:
          $ref: '#/definitions/ClusterFirewallRuleSettings'
        type: array
      name:
        type: string
      networks:
        items:
          $ref: '#/definitions/ClusterNetworkSettings'
        type: array
      node_location:
        type: string
      nodes:
        items:
          $ref: '#/definitions/ClusterNodeSettings'
        type: array
      regions:
        items:
          type: string
        type: array
      resource_tags:
        additionalProperties:
          type: string
        type: object
      ssh_key_id:
        type: string
    required:
    - name
    - regions
    - node_location
    type: object
  CreateDatabaseInput:
    properties:
      backups:
        $ref: '#/definitions/Backups'
      cluster_id:
        format: uuid
        type: string
      config_version:
        type: string
      extensions:
        $ref: '#/definitions/Extensions'
      name:
        type: string
      options:
        items:
          type: string
        type: array
    required:
    - name
    type: object
  Database:
    properties:
      backups:
        $ref: '#/definitions/Backups'
      cluster_id:
        format: uuid
        type: string
      components:
        items:
          $ref: '#/definitions/DatabaseComponentVersion'
        type: array
      config_version:
        type: string
      created_at:
        type: string
      domain:
        type: string
      extensions:
        $ref: '#/definitions/Extensions'
      id:
        format: uuid
        type: string
      name:
        type: string
      nodes:
        items:
          $ref: '#/definitions/DatabaseNode'
        type: array
      options:
        items:
          type: string
        type: array
      pg_version:
        type: string
      roles:
        items:
          $ref: '#/definitions/DatabaseRole'
        type: array
      status:
        type: string
      storage_used:
        format: int64
        type: integer
      tables:
        items:
          $ref: '#/definitions/DatabaseTable'
        type: array
      updated_at:
        type: string
    required:
    - id
    - cluster_id
    - name
    - status
    - created_at
    - updated_at
    type: object
  DatabaseColumn:
    properties:
      data_type:
        type: string
      default:
        type: string
      is_nullable:
        type: boolean
      is_primary_key:
        type: boolean
      name:
        type: string
      ordinal_position:
        type: integer
    required:
    - name
    - ordinal_position
    - data_type
    - default
    - is_nullable
    - is_primary_key
    type: object
  DatabaseComponentVersion:
    properties:
      id:
        format: uuid
        type: string
      name:
        type: string
      release_date:
        type: string
      status:
        type: string
      version:
        type: string
    required:
    - id
    - name
    - version
    - release_date
    - status
    type: object
  DatabaseNode:
    properties:
      connection:
        $ref: '#/definitions/Connection'
      distance_measurement:
        $ref: '#/definitions/DistanceMeasurement'
      extensions:
        $ref: '#/definitions/DatabaseNodeExtensions'
      location:
        $ref: '#/definitions/Location'
      name:
        type: string
      region:
        $ref: '#/definitions/Region'
    required:
    - name
    - connection
    - location
    type: object
  DatabaseNodeExtensions:
    properties:
      errors:
        additionalProperties:
          type: string
        type: object
      installed:
        items:
          type: string
        type: array
    required:
    - installed
    type: object
  DatabaseRole:
    properties:
      bypass_rls:
        type: boolean
      connection_limit:
        type: integer
      create_db:
        type: boolean
      create_role:
        type: boolean
      inherit:
        type: boolean
      login:
        type: boolean
      name:
        type: string
      replication:
        type: boolean
      superuser:
        type: boolean
    required:
    - name
    - connection_limit
    - superuser
    - create_role
    - create_db
    - login
    - inherit
    - replication
    - bypass_rls
    type: object
  DatabaseTable:
    properties:
      columns:
        items:
          $ref: '#/definitions/DatabaseColumn'
        type: array
      name:
        type: string
      primary_key:
        items:
          type: string
        type: array
      replication_sets:
        items:
          type: string
        type: array
      schema:
        type: string
      status:
        items:
          $ref: '#/definitions/DatabaseTableStatus'
        type: array
    required:
    - schema
    - name
    - primary_key
    - replication_sets
    - status
    type: object
  DatabaseTableStatus:
    properties:
      aligned:
        type: boolean
      node_name:
        type: string
      present:
        type: boolean
      replicating:
        type: boolean
    required:
    - node_name
    - present
    - aligned
    - replicating
    type: object
  DistanceMeasurement:
    properties:
      distance:
        format: double
        type: number
      from_latitude:
        format: double
        type: number
      from_longitude:
        format: double
        type: number
      unit:
        type: string
    required:
    - distance
    - unit
    - from_latitude
    - from_longitude
    type: object
  Error:
    properties:
      code:
        type: integer
      message:
        type: string
    type: object
  Extensions:
    properties:
      auto_manage:
        type: boolean
      available:
        items:
          type: string
        type: array
      requested:
        items:
          type: string
        type: array
    type: object
  GoogleCredentials:
    properties:
      project_id:
        type: string
      provider:
        type: string
      service_account:
        type: string
    required:
    - project_id
    - service_account
    - provider
    type: object
  Location:
    properties:
      city:
        type: string
      code:
        type: string
      country:
        type: string
      latitude:
        format: double
        type: number
      longitude:
        format: double
        type: number
      metro_code:
        type: string
      name:
        type: string
      postal_code:
        type: string
      region:
        type: string
      region_code:
        type: string
      timezone:
        type: string
    required:
    - latitude
    - longitude
    type: object
  Region:
    properties:
      active:
        type: boolean
      availability_zones:
        items:
          type: string
        type: array
      cloud:
        type: string
      code:
        type: string
      name:
        type: string
      parent:
        type: string
    required:
    - cloud
    - code
    - name
    - availability_zones
    type: object
  UpdateClusterInput:
    properties:
      backup_store_ids:
        items:
          type: string
        type: array
      firewall_rules:
        items:
          $ref: '#/definitions/ClusterFirewallRuleSettings'
        type: array
      networks:
        items:
          $ref: '#/definitions/ClusterNetworkSettings'
        type: array
      nodes:
        items:
          $ref: '#/definitions/ClusterNodeSettings'
        type: array
      regions:
        items:
          type: string
        type: array
      resource_tags:
        additionalProperties:
          type: string
        type: object
      ssh_key_id:
        type: string
    required:
    - regions
    type: object
  UpdateDatabaseInput:
    properties:
      extensions:
        $ref: '#/definitions/Extensions'
      nodes:
        items:
          $ref: '#/definitions/DatabaseNode'
        type: array
      options:
        items:
          type: string
        type: array
    type: object
info:
  title: pgEdge API
  version: 1.0.0
paths:
  /cloud-accounts:
    get:
      description: Lists cloud accounts known to pgEdge.
      parameters:
      - format: Bearer {access_token}
        in: header
        name: Authorization
        required: true
        type: string
      responses:
        '200':
          description: List cloud accounts response
          schema:
            items:
              $ref: '#/definitions/CloudAccount'
            type: array
        '400':
          description: Bad request.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Authorization information is missing or invalid.
          schema:
            $ref: '#/definitions/Error'
      summary: Lists cloud accounts known to pgEdge.
    post:
      description: Onboard a new cloud account.
      parameters:
      - format: Bearer {access_token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: The cloud account details.
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/CreateCloudAccountInput'
      responses:
        '200':
          description: Response containing the cloud account details.
          schema:
            $ref: '#/definitions/CloudAccount'
        '400':
          description: Bad request.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Authorization information is missing or invalid.
          schema:
            $ref: '#/definitions/Error'
      summary: Onboard a new cloud account.
  /cloud-accounts/{id}:
    delete:
      description: Offboard a cloud account.
      parameters:
      - format: Bearer {access_token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: ID of the cloud account to offboard.
        format: uuid
        in: path
        name: id
        required: true
        type: string
      responses:
        '204':
          description: Empty response indicating that the cloud account was offboarded.
        '400':
          description: Bad request.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Authorization information is missing or invalid.
          schema:
            $ref: '#/definitions/Error'
      summary: Offboard a cloud account.
    get:
      description: Retrieve a cloud account.
      parameters:
      - format: Bearer {access_token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: ID of the cloud account to retrieve.
        format: uuid
        in: path
        name: id
        required: true
        type: string
      responses:
        '200':
          description: Response containing the cloud account details.
          schema:
            $ref: '#/definitions/CloudAccount'
        '400':
          description: Bad request.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Authorization information is missing or invalid.
          schema:
            $ref: '#/definitions/Error'
      summary: Retrieve a cloud account.
  /clusters:
    get:
      description: Lists existing pgEdge database clusters.
      parameters:
      - in: header
        name: Authorization
        required: true
        type: string
      - description: Maximum number of results to return.
        in: query
        name: limit
        type: integer
      - description: Offset into the results, for pagination.
        in: query
        name: offset
        type: integer
      responses:
        '200':
          description: Response containing an array of clusters.
          schema:
            items:
              $ref: '#/definitions/Cluster'
            type: array
        '400':
          description: Bad request.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Authorization information is missing or invalid.
          schema:
            $ref: '#/definitions/Error'
      summary: Lists existing pgEdge database clusters.
    post:
      description: Creates a new pgEdge database cluster.
      parameters:
      - in: header
        name: Authorization
        required: true
        type: string
      - description: The cluster definition.
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/CreateClusterInput'
      responses:
        '200':
          description: Response containing the cluster definition.
          schema:
            $ref: '#/definitions/Cluster'
        '400':
          description: Bad request.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Authorization information is missing or invalid.
          schema:
            $ref: '#/definitions/Error'
      summary: Creates a new pgEdge database cluster.
  /clusters/{id}:
    delete:
      description: Deletes a pgEdge database cluster.
      parameters:
      - format: Bearer {access_token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: ID of the cluster to delete.
        format: uuid
        in: path
        name: id
        required: true
        type: string
      responses:
        '204':
          description: Empty response indicating that the cluster was deleted.
        '400':
          description: Bad request.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Authorization information is missing or invalid.
          schema:
            $ref: '#/definitions/Error'
      summary: Deletes a pgEdge database cluster.
    get:
      description: Retrieve a pgEdge database cluster given its ID.
      parameters:
      - format: Bearer {access_token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: ID of the cluster to retrieve.
        format: uuid
        in: path
        name: id
        required: true
        type: string
      responses:
        '200':
          description: Response containing the cluster definition.
          schema:
            $ref: '#/definitions/Cluster'
        '400':
          description: Bad request.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Authorization information is missing or invalid.
          schema:
            $ref: '#/definitions/Error'
      summary: Retrieve a pgEdge database cluster given its ID.
    patch:
      description: Update a pgEdge database cluster.
      parameters:
      - format: Bearer {access_token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: ID of the cluster to update.
        format: uuid
        in: path
        name: id
        required: true
        type: string
      - description: The cluster definition.
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/UpdateClusterInput'
      responses:
        '200':
          description: Response containing the cluster definition.
          schema:
            $ref: '#/definitions/Cluster'
        '400':
          description: Bad request.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Authorization information is missing or invalid.
          schema:
            $ref: '#/definitions/Error'
      summary: Update a pgEdge database cluster.
  /clusters/{id}/nodes:
    get:
      description: Lists nodes belonging to a specific cluster.
      parameters:
      - format: Bearer {access_token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: ID of the cluster.
        format: uuid
        in: path
        name: id
        required: true
        type: string
      - description: Latitude of the caller, when sorting by distance
        in: query
        name: near_lat
        type: string
      - description: Longitude of the caller, when sorting by distance
        in: query
        name: near_lon
        type: string
      - description: Order by specification
        in: query
        name: order_by
        type: string
      responses:
        '200':
          description: Response containing the cluster nodes.
          schema:
            items:
              $ref: '#/definitions/ClusterNode'
            type: array
        '400':
          description: Bad request.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Authorization information is missing or invalid.
          schema:
            $ref: '#/definitions/Error'
      summary: Lists nodes belonging to a specific cluster.
  /clusters/{id}/nodes/{node_id}/logs/{log_name}:
    get:
      description: Retrieve messages from log file on a database node.
      parameters:
      - format: Bearer {access_token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: ID of the cluster.
        in: path
        name: id
        required: true
        type: string
      - description: ID of the node.
        in: path
        name: node_id
        required: true
        type: string
      - description: Name of the log file.
        in: path
        name: log_name
        required: true
        type: string
      - description: Number of lines to return.
        in: query
        name: lines
        type: integer
      - description: Start showing entries on or newer than the specified date.
        in: query
        name: since
        type: string
      - description: Start showing entries on or older than the specified date.
        in: query
        name: until
        type: string
      - description: Filter output by message priority.
        in: query
        name: priority
        type: string
      - description: Filter output to entries where the message field matches this
          regular expression.
        in: query
        name: grep
        type: string
      - description: Make pattern matching case sensitive or case insensitive.
        in: query
        name: case_sensitive
        type: boolean
      - description: Reverse output so that the newest entries are displayed first.
        in: query
        name: reverse
        type: boolean
      - description: Show only kernel messages.
        in: query
        name: dmesg
        type: boolean
      - description: Controls the formatting of the journal entries that are shown.
        in: query
        name: output
        type: string
      responses:
        '200':
          description: Response containing log file messages
          schema:
            items:
              $ref: '#/definitions/ClusterNodeLogMessage'
            type: array
        '400':
          description: Bad request.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Authorization information is missing or invalid.
          schema:
            $ref: '#/definitions/Error'
      summary: Retrieve messages from log file on a database node.
  /databases:
    get:
      description: Lists databases.
      parameters:
      - format: Bearer {access_token}
        in: header
        name: Authorization
        required: true
        type: string
      responses:
        '200':
          description: Response containing an array of databases.
          schema:
            items:
              $ref: '#/definitions/Database'
            type: array
        '400':
          description: Bad request.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Authorization information is missing or invalid.
          schema:
            $ref: '#/definitions/Error'
      summary: Lists databases.
    post:
      description: Creates a new database.
      parameters:
      - format: Bearer {access_token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: The database definition.
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/CreateDatabaseInput'
      responses:
        '200':
          description: Response containing the database definition.
          schema:
            $ref: '#/definitions/Database'
        '400':
          description: Bad request.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Authorization information is missing or invalid.
          schema:
            $ref: '#/definitions/Error'
      summary: Creates a new database.
  /databases/{id}:
    delete:
      description: Deletes a database.
      parameters:
      - format: Bearer {access_token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: ID of the database to delete.
        format: uuid
        in: path
        name: id
        required: true
        type: string
      responses:
        '204':
          description: Empty response indicating that the database was deleted.
        '400':
          description: Bad request.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Authorization information is missing or invalid.
          schema:
            $ref: '#/definitions/Error'
      summary: Deletes a database.
    get:
      description: Retrieve a database given its ID.
      parameters:
      - format: Bearer {access_token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: ID of the database to retrieve.
        format: uuid
        in: path
        name: id
        required: true
        type: string
      - description: The user type whose credentials will be returned.
        in: query
        name: user_type
        required: false
        type: string
      responses:
        '200':
          description: Response containing the database definition.
          schema:
            $ref: '#/definitions/Database'
        '400':
          description: Bad request.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Authorization information is missing or invalid.
          schema:
            $ref: '#/definitions/Error'
      summary: Retrieve a database given its ID.
    patch:
      description: Updates a database.
      parameters:
      - format: Bearer {access_token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: ID of the database to update.
        format: uuid
        in: path
        name: id
        required: true
        type: string
      - description: The database parameters to update.
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/UpdateDatabaseInput'
      responses:
        '200':
          description: Response containing the updated database definition.
          schema:
            $ref: '#/definitions/Database'
        '400':
          description: Bad request.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Authorization information is missing or invalid.
          schema:
            $ref: '#/definitions/Error'
      summary: Updates a database.
  /oauth/token:
    post:
      consumes:
      - application/json
      description: Get an OAuth token using client credentials
      parameters:
      - description: Client credentials for obtaining the OAuth token
        in: body
        name: body
        required: true
        schema:
          properties:
            client_id:
              type: string
            client_secret:
              type: string
            grant_type:
              type: string
          type: object
      produces:
      - application/json
      responses:
        '200':
          description: Successful response
          schema:
            properties:
              access_token:
                type: string
              expires_in:
                type: integer
              token_type:
                type: string
            type: object
        '400':
          description: Bad request
          schema:
            properties:
              code:
                type: integer
              message:
                type: string
            type: object
        '500':
          description: Internal Server Error
          schema:
            properties:
              code:
                type: integer
              message:
                type: string
            type: object
      summary: Obtain OAuth Token
swagger: '2.0'
