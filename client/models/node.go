// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Node node
//
// swagger:model Node
type Node struct {

	// connection
	Connection *NodeConnection `json:"connection,omitempty"`

	// distance measurement
	DistanceMeasurement *NodeDistanceMeasurement `json:"distance_measurement,omitempty"`

	// extensions
	Extensions *NodeExtensions `json:"extensions,omitempty"`

	// location
	Location *NodeLocation `json:"location,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// region
	Region *NodeRegion `json:"region,omitempty"`
}

// Validate validates this node
func (m *Node) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConnection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDistanceMeasurement(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExtensions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Node) validateConnection(formats strfmt.Registry) error {
	if swag.IsZero(m.Connection) { // not required
		return nil
	}

	if m.Connection != nil {
		if err := m.Connection.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("connection")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("connection")
			}
			return err
		}
	}

	return nil
}

func (m *Node) validateDistanceMeasurement(formats strfmt.Registry) error {
	if swag.IsZero(m.DistanceMeasurement) { // not required
		return nil
	}

	if m.DistanceMeasurement != nil {
		if err := m.DistanceMeasurement.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("distance_measurement")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("distance_measurement")
			}
			return err
		}
	}

	return nil
}

func (m *Node) validateExtensions(formats strfmt.Registry) error {
	if swag.IsZero(m.Extensions) { // not required
		return nil
	}

	if m.Extensions != nil {
		if err := m.Extensions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("extensions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("extensions")
			}
			return err
		}
	}

	return nil
}

func (m *Node) validateLocation(formats strfmt.Registry) error {
	if swag.IsZero(m.Location) { // not required
		return nil
	}

	if m.Location != nil {
		if err := m.Location.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("location")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("location")
			}
			return err
		}
	}

	return nil
}

func (m *Node) validateRegion(formats strfmt.Registry) error {
	if swag.IsZero(m.Region) { // not required
		return nil
	}

	if m.Region != nil {
		if err := m.Region.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("region")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("region")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this node based on the context it is used
func (m *Node) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConnection(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDistanceMeasurement(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExtensions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLocation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRegion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Node) contextValidateConnection(ctx context.Context, formats strfmt.Registry) error {

	if m.Connection != nil {

		if swag.IsZero(m.Connection) { // not required
			return nil
		}

		if err := m.Connection.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("connection")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("connection")
			}
			return err
		}
	}

	return nil
}

func (m *Node) contextValidateDistanceMeasurement(ctx context.Context, formats strfmt.Registry) error {

	if m.DistanceMeasurement != nil {

		if swag.IsZero(m.DistanceMeasurement) { // not required
			return nil
		}

		if err := m.DistanceMeasurement.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("distance_measurement")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("distance_measurement")
			}
			return err
		}
	}

	return nil
}

func (m *Node) contextValidateExtensions(ctx context.Context, formats strfmt.Registry) error {

	if m.Extensions != nil {

		if swag.IsZero(m.Extensions) { // not required
			return nil
		}

		if err := m.Extensions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("extensions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("extensions")
			}
			return err
		}
	}

	return nil
}

func (m *Node) contextValidateLocation(ctx context.Context, formats strfmt.Registry) error {

	if m.Location != nil {

		if swag.IsZero(m.Location) { // not required
			return nil
		}

		if err := m.Location.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("location")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("location")
			}
			return err
		}
	}

	return nil
}

func (m *Node) contextValidateRegion(ctx context.Context, formats strfmt.Registry) error {

	if m.Region != nil {

		if swag.IsZero(m.Region) { // not required
			return nil
		}

		if err := m.Region.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("region")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("region")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Node) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Node) UnmarshalBinary(b []byte) error {
	var res Node
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// NodeConnection node connection
//
// swagger:model NodeConnection
type NodeConnection struct {

	// database
	Database string `json:"database,omitempty"`

	// external ip address
	ExternalIPAddress string `json:"external_ip_address,omitempty"`

	// host
	Host string `json:"host,omitempty"`

	// internal host
	InternalHost string `json:"internal_host,omitempty"`

	// internal ip address
	InternalIPAddress string `json:"internal_ip_address,omitempty"`

	// password
	Password string `json:"password,omitempty"`

	// port
	Port int64 `json:"port,omitempty"`

	// username
	Username string `json:"username,omitempty"`
}

// Validate validates this node connection
func (m *NodeConnection) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this node connection based on context it is used
func (m *NodeConnection) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *NodeConnection) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NodeConnection) UnmarshalBinary(b []byte) error {
	var res NodeConnection
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// NodeDistanceMeasurement node distance measurement
//
// swagger:model NodeDistanceMeasurement
type NodeDistanceMeasurement struct {

	// distance
	Distance float64 `json:"distance,omitempty"`

	// from latitude
	FromLatitude float64 `json:"from_latitude,omitempty"`

	// from longitude
	FromLongitude float64 `json:"from_longitude,omitempty"`

	// unit
	Unit string `json:"unit,omitempty"`
}

// Validate validates this node distance measurement
func (m *NodeDistanceMeasurement) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this node distance measurement based on context it is used
func (m *NodeDistanceMeasurement) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *NodeDistanceMeasurement) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NodeDistanceMeasurement) UnmarshalBinary(b []byte) error {
	var res NodeDistanceMeasurement
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// NodeExtensions node extensions
//
// swagger:model NodeExtensions
type NodeExtensions struct {

	// errors
	Errors *NodeExtensionsErrors `json:"errors,omitempty"`

	// installed
	Installed []string `json:"installed"`
}

// Validate validates this node extensions
func (m *NodeExtensions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NodeExtensions) validateErrors(formats strfmt.Registry) error {
	if swag.IsZero(m.Errors) { // not required
		return nil
	}

	if m.Errors != nil {
		if err := m.Errors.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("extensions" + "." + "errors")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("extensions" + "." + "errors")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this node extensions based on the context it is used
func (m *NodeExtensions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateErrors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NodeExtensions) contextValidateErrors(ctx context.Context, formats strfmt.Registry) error {

	if m.Errors != nil {

		if swag.IsZero(m.Errors) { // not required
			return nil
		}

		if err := m.Errors.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("extensions" + "." + "errors")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("extensions" + "." + "errors")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NodeExtensions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NodeExtensions) UnmarshalBinary(b []byte) error {
	var res NodeExtensions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// NodeExtensionsErrors node extensions errors
//
// swagger:model NodeExtensionsErrors
type NodeExtensionsErrors struct {

	// anim9ef
	Anim9ef string `json:"anim9ef,omitempty"`

	// enim3b
	Enim3b string `json:"enim3b,omitempty"`

	// laborum d
	Laborumd string `json:"laborum_d,omitempty"`

	// mollit267
	Mollit267 string `json:"mollit267,omitempty"`
}

// Validate validates this node extensions errors
func (m *NodeExtensionsErrors) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this node extensions errors based on context it is used
func (m *NodeExtensionsErrors) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *NodeExtensionsErrors) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NodeExtensionsErrors) UnmarshalBinary(b []byte) error {
	var res NodeExtensionsErrors
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// NodeLocation node location
//
// swagger:model NodeLocation
type NodeLocation struct {

	// city
	City string `json:"city,omitempty"`

	// code
	Code string `json:"code,omitempty"`

	// country
	Country string `json:"country,omitempty"`

	// latitude
	Latitude float64 `json:"latitude,omitempty"`

	// longitude
	Longitude float64 `json:"longitude,omitempty"`

	// metro code
	MetroCode string `json:"metro_code,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// postal code
	PostalCode string `json:"postal_code,omitempty"`

	// region
	Region string `json:"region,omitempty"`

	// region code
	RegionCode string `json:"region_code,omitempty"`

	// timezone
	Timezone string `json:"timezone,omitempty"`
}

// Validate validates this node location
func (m *NodeLocation) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this node location based on context it is used
func (m *NodeLocation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *NodeLocation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NodeLocation) UnmarshalBinary(b []byte) error {
	var res NodeLocation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// NodeRegion node region
//
// swagger:model NodeRegion
type NodeRegion struct {

	// active
	Active bool `json:"active,omitempty"`

	// availability zones
	AvailabilityZones []string `json:"availability_zones"`

	// cloud
	Cloud string `json:"cloud,omitempty"`

	// code
	Code string `json:"code,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// parent
	Parent string `json:"parent,omitempty"`
}

// Validate validates this node region
func (m *NodeRegion) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this node region based on context it is used
func (m *NodeRegion) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *NodeRegion) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NodeRegion) UnmarshalBinary(b []byte) error {
	var res NodeRegion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
