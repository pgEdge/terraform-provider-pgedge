// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GoogleCredentials google credentials
//
// swagger:model GoogleCredentials
type GoogleCredentials struct {

	// project id
	// Required: true
	ProjectID *string `json:"project_id"`

	// provider
	// Required: true
	Provider *string `json:"provider"`

	// service account
	// Required: true
	ServiceAccount *string `json:"service_account"`
}

// Validate validates this google credentials
func (m *GoogleCredentials) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProjectID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProvider(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceAccount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GoogleCredentials) validateProjectID(formats strfmt.Registry) error {

	if err := validate.Required("project_id", "body", m.ProjectID); err != nil {
		return err
	}

	return nil
}

func (m *GoogleCredentials) validateProvider(formats strfmt.Registry) error {

	if err := validate.Required("provider", "body", m.Provider); err != nil {
		return err
	}

	return nil
}

func (m *GoogleCredentials) validateServiceAccount(formats strfmt.Registry) error {

	if err := validate.Required("service_account", "body", m.ServiceAccount); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this google credentials based on context it is used
func (m *GoogleCredentials) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GoogleCredentials) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GoogleCredentials) UnmarshalBinary(b []byte) error {
	var res GoogleCredentials
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
