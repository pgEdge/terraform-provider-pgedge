// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ClusterNodeLogMessage cluster node log message
//
// swagger:model ClusterNodeLogMessage
type ClusterNodeLogMessage struct {

	// level
	// Required: true
	Level *string `json:"level"`

	// message
	// Required: true
	Message *string `json:"message"`

	// raw text
	// Required: true
	RawText *string `json:"raw_text"`

	// time
	// Required: true
	Time *string `json:"time"`
}

// Validate validates this cluster node log message
func (m *ClusterNodeLogMessage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLevel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRawText(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterNodeLogMessage) validateLevel(formats strfmt.Registry) error {

	if err := validate.Required("level", "body", m.Level); err != nil {
		return err
	}

	return nil
}

func (m *ClusterNodeLogMessage) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("message", "body", m.Message); err != nil {
		return err
	}

	return nil
}

func (m *ClusterNodeLogMessage) validateRawText(formats strfmt.Registry) error {

	if err := validate.Required("raw_text", "body", m.RawText); err != nil {
		return err
	}

	return nil
}

func (m *ClusterNodeLogMessage) validateTime(formats strfmt.Registry) error {

	if err := validate.Required("time", "body", m.Time); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this cluster node log message based on context it is used
func (m *ClusterNodeLogMessage) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ClusterNodeLogMessage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterNodeLogMessage) UnmarshalBinary(b []byte) error {
	var res ClusterNodeLogMessage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
