// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DatabaseTableStatus database table status
//
// swagger:model DatabaseTableStatus
type DatabaseTableStatus struct {

	// aligned
	// Required: true
	Aligned *bool `json:"aligned"`

	// node name
	// Required: true
	NodeName *string `json:"node_name"`

	// present
	// Required: true
	Present *bool `json:"present"`

	// replicating
	// Required: true
	Replicating *bool `json:"replicating"`
}

// Validate validates this database table status
func (m *DatabaseTableStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAligned(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodeName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePresent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplicating(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DatabaseTableStatus) validateAligned(formats strfmt.Registry) error {

	if err := validate.Required("aligned", "body", m.Aligned); err != nil {
		return err
	}

	return nil
}

func (m *DatabaseTableStatus) validateNodeName(formats strfmt.Registry) error {

	if err := validate.Required("node_name", "body", m.NodeName); err != nil {
		return err
	}

	return nil
}

func (m *DatabaseTableStatus) validatePresent(formats strfmt.Registry) error {

	if err := validate.Required("present", "body", m.Present); err != nil {
		return err
	}

	return nil
}

func (m *DatabaseTableStatus) validateReplicating(formats strfmt.Registry) error {

	if err := validate.Required("replicating", "body", m.Replicating); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this database table status based on context it is used
func (m *DatabaseTableStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DatabaseTableStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DatabaseTableStatus) UnmarshalBinary(b []byte) error {
	var res DatabaseTableStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
