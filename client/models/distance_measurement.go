// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DistanceMeasurement distance measurement
//
// swagger:model DistanceMeasurement
type DistanceMeasurement struct {

	// distance
	// Required: true
	Distance *float64 `json:"distance"`

	// from latitude
	// Required: true
	FromLatitude *float64 `json:"from_latitude"`

	// from longitude
	// Required: true
	FromLongitude *float64 `json:"from_longitude"`

	// unit
	// Required: true
	Unit *string `json:"unit"`
}

// Validate validates this distance measurement
func (m *DistanceMeasurement) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDistance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFromLatitude(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFromLongitude(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnit(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DistanceMeasurement) validateDistance(formats strfmt.Registry) error {

	if err := validate.Required("distance", "body", m.Distance); err != nil {
		return err
	}

	return nil
}

func (m *DistanceMeasurement) validateFromLatitude(formats strfmt.Registry) error {

	if err := validate.Required("from_latitude", "body", m.FromLatitude); err != nil {
		return err
	}

	return nil
}

func (m *DistanceMeasurement) validateFromLongitude(formats strfmt.Registry) error {

	if err := validate.Required("from_longitude", "body", m.FromLongitude); err != nil {
		return err
	}

	return nil
}

func (m *DistanceMeasurement) validateUnit(formats strfmt.Registry) error {

	if err := validate.Required("unit", "body", m.Unit); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this distance measurement based on context it is used
func (m *DistanceMeasurement) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DistanceMeasurement) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DistanceMeasurement) UnmarshalBinary(b []byte) error {
	var res DistanceMeasurement
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
