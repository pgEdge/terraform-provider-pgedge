// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DatabaseRole database role
//
// swagger:model DatabaseRole
type DatabaseRole struct {

	// bypass rls
	// Required: true
	BypassRls *bool `json:"bypass_rls"`

	// connection limit
	// Required: true
	ConnectionLimit *int64 `json:"connection_limit"`

	// create db
	// Required: true
	CreateDb *bool `json:"create_db"`

	// create role
	// Required: true
	CreateRole *bool `json:"create_role"`

	// inherit
	// Required: true
	Inherit *bool `json:"inherit"`

	// login
	// Required: true
	Login *bool `json:"login"`

	// name
	// Required: true
	Name *string `json:"name"`

	// replication
	// Required: true
	Replication *bool `json:"replication"`

	// superuser
	// Required: true
	Superuser *bool `json:"superuser"`
}

// Validate validates this database role
func (m *DatabaseRole) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBypassRls(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConnectionLimit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreateDb(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreateRole(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInherit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLogin(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplication(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSuperuser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DatabaseRole) validateBypassRls(formats strfmt.Registry) error {

	if err := validate.Required("bypass_rls", "body", m.BypassRls); err != nil {
		return err
	}

	return nil
}

func (m *DatabaseRole) validateConnectionLimit(formats strfmt.Registry) error {

	if err := validate.Required("connection_limit", "body", m.ConnectionLimit); err != nil {
		return err
	}

	return nil
}

func (m *DatabaseRole) validateCreateDb(formats strfmt.Registry) error {

	if err := validate.Required("create_db", "body", m.CreateDb); err != nil {
		return err
	}

	return nil
}

func (m *DatabaseRole) validateCreateRole(formats strfmt.Registry) error {

	if err := validate.Required("create_role", "body", m.CreateRole); err != nil {
		return err
	}

	return nil
}

func (m *DatabaseRole) validateInherit(formats strfmt.Registry) error {

	if err := validate.Required("inherit", "body", m.Inherit); err != nil {
		return err
	}

	return nil
}

func (m *DatabaseRole) validateLogin(formats strfmt.Registry) error {

	if err := validate.Required("login", "body", m.Login); err != nil {
		return err
	}

	return nil
}

func (m *DatabaseRole) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *DatabaseRole) validateReplication(formats strfmt.Registry) error {

	if err := validate.Required("replication", "body", m.Replication); err != nil {
		return err
	}

	return nil
}

func (m *DatabaseRole) validateSuperuser(formats strfmt.Registry) error {

	if err := validate.Required("superuser", "body", m.Superuser); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this database role based on context it is used
func (m *DatabaseRole) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DatabaseRole) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DatabaseRole) UnmarshalBinary(b []byte) error {
	var res DatabaseRole
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
