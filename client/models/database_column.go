// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DatabaseColumn database column
//
// swagger:model DatabaseColumn
type DatabaseColumn struct {

	// data type
	// Required: true
	DataType *string `json:"data_type"`

	// default
	// Required: true
	Default *string `json:"default"`

	// is nullable
	// Required: true
	IsNullable *bool `json:"is_nullable"`

	// is primary key
	// Required: true
	IsPrimaryKey *bool `json:"is_primary_key"`

	// name
	// Required: true
	Name *string `json:"name"`

	// ordinal position
	// Required: true
	OrdinalPosition *int64 `json:"ordinal_position"`
}

// Validate validates this database column
func (m *DatabaseColumn) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDataType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefault(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsNullable(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsPrimaryKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrdinalPosition(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DatabaseColumn) validateDataType(formats strfmt.Registry) error {

	if err := validate.Required("data_type", "body", m.DataType); err != nil {
		return err
	}

	return nil
}

func (m *DatabaseColumn) validateDefault(formats strfmt.Registry) error {

	if err := validate.Required("default", "body", m.Default); err != nil {
		return err
	}

	return nil
}

func (m *DatabaseColumn) validateIsNullable(formats strfmt.Registry) error {

	if err := validate.Required("is_nullable", "body", m.IsNullable); err != nil {
		return err
	}

	return nil
}

func (m *DatabaseColumn) validateIsPrimaryKey(formats strfmt.Registry) error {

	if err := validate.Required("is_primary_key", "body", m.IsPrimaryKey); err != nil {
		return err
	}

	return nil
}

func (m *DatabaseColumn) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *DatabaseColumn) validateOrdinalPosition(formats strfmt.Registry) error {

	if err := validate.Required("ordinal_position", "body", m.OrdinalPosition); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this database column based on context it is used
func (m *DatabaseColumn) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DatabaseColumn) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DatabaseColumn) UnmarshalBinary(b []byte) error {
	var res DatabaseColumn
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
