// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BackupStore backup store
//
// swagger:model BackupStore
type BackupStore struct {

	// The ID of the cloud account used for the backup store.
	// Required: true
	CloudAccountID *string `json:"cloud_account_id"`

	// The type of the cloud account used for the backup store.
	// Required: true
	CloudAccountType *string `json:"cloud_account_type"`

	// The IDs of the clusters that use the backup store.
	ClusterIds []string `json:"cluster_ids"`

	// The time the backup store was created.
	// Required: true
	CreatedAt *string `json:"created_at"`

	// The ID of the backup store.
	// Required: true
	// Format: uuid
	ID *strfmt.UUID `json:"id"`

	// The name of the backup store.
	// Required: true
	Name *string `json:"name"`

	// The computed properties of the backup store.
	Properties interface{} `json:"properties,omitempty"`

	// The status of the backup store.
	// Required: true
	Status *string `json:"status"`

	// The time the backup store was last updated.
	// Required: true
	UpdatedAt *string `json:"updated_at"`
}

// Validate validates this backup store
func (m *BackupStore) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCloudAccountID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCloudAccountType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BackupStore) validateCloudAccountID(formats strfmt.Registry) error {

	if err := validate.Required("cloud_account_id", "body", m.CloudAccountID); err != nil {
		return err
	}

	return nil
}

func (m *BackupStore) validateCloudAccountType(formats strfmt.Registry) error {

	if err := validate.Required("cloud_account_type", "body", m.CloudAccountType); err != nil {
		return err
	}

	return nil
}

func (m *BackupStore) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", m.CreatedAt); err != nil {
		return err
	}

	return nil
}

func (m *BackupStore) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *BackupStore) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *BackupStore) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *BackupStore) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updated_at", "body", m.UpdatedAt); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this backup store based on context it is used
func (m *BackupStore) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BackupStore) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BackupStore) UnmarshalBinary(b []byte) error {
	var res BackupStore
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
