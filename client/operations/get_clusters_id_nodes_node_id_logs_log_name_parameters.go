// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetClustersIDNodesNodeIDLogsLogNameParams creates a new GetClustersIDNodesNodeIDLogsLogNameParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetClustersIDNodesNodeIDLogsLogNameParams() *GetClustersIDNodesNodeIDLogsLogNameParams {
	return &GetClustersIDNodesNodeIDLogsLogNameParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetClustersIDNodesNodeIDLogsLogNameParamsWithTimeout creates a new GetClustersIDNodesNodeIDLogsLogNameParams object
// with the ability to set a timeout on a request.
func NewGetClustersIDNodesNodeIDLogsLogNameParamsWithTimeout(timeout time.Duration) *GetClustersIDNodesNodeIDLogsLogNameParams {
	return &GetClustersIDNodesNodeIDLogsLogNameParams{
		timeout: timeout,
	}
}

// NewGetClustersIDNodesNodeIDLogsLogNameParamsWithContext creates a new GetClustersIDNodesNodeIDLogsLogNameParams object
// with the ability to set a context for a request.
func NewGetClustersIDNodesNodeIDLogsLogNameParamsWithContext(ctx context.Context) *GetClustersIDNodesNodeIDLogsLogNameParams {
	return &GetClustersIDNodesNodeIDLogsLogNameParams{
		Context: ctx,
	}
}

// NewGetClustersIDNodesNodeIDLogsLogNameParamsWithHTTPClient creates a new GetClustersIDNodesNodeIDLogsLogNameParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetClustersIDNodesNodeIDLogsLogNameParamsWithHTTPClient(client *http.Client) *GetClustersIDNodesNodeIDLogsLogNameParams {
	return &GetClustersIDNodesNodeIDLogsLogNameParams{
		HTTPClient: client,
	}
}

/*
GetClustersIDNodesNodeIDLogsLogNameParams contains all the parameters to send to the API endpoint

	for the get clusters ID nodes node ID logs log name operation.

	Typically these are written to a http.Request.
*/
type GetClustersIDNodesNodeIDLogsLogNameParams struct {

	// Authorization.
	//
	// Format: Bearer {access_token}
	Authorization string

	/* CaseSensitive.

	   Make pattern matching case sensitive or case insensitive.
	*/
	CaseSensitive *bool

	/* Dmesg.

	   Show only kernel messages.
	*/
	Dmesg *bool

	/* Grep.

	   Filter output to entries where the message field matches this regular expression.
	*/
	Grep *string

	/* ID.

	   ID of the cluster.
	*/
	ID string

	/* Lines.

	   Number of lines to return.
	*/
	Lines *int64

	/* LogName.

	   Name of the log file.
	*/
	LogName string

	/* NodeID.

	   ID of the node.
	*/
	NodeID string

	/* Output.

	   Controls the formatting of the journal entries that are shown.
	*/
	Output *string

	/* Priority.

	   Filter output by message priority.
	*/
	Priority *string

	/* Reverse.

	   Reverse output so that the newest entries are displayed first.
	*/
	Reverse *bool

	/* Since.

	   Start showing entries on or newer than the specified date.
	*/
	Since *string

	/* Until.

	   Start showing entries on or older than the specified date.
	*/
	Until *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get clusters ID nodes node ID logs log name params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetClustersIDNodesNodeIDLogsLogNameParams) WithDefaults() *GetClustersIDNodesNodeIDLogsLogNameParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get clusters ID nodes node ID logs log name params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetClustersIDNodesNodeIDLogsLogNameParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get clusters ID nodes node ID logs log name params
func (o *GetClustersIDNodesNodeIDLogsLogNameParams) WithTimeout(timeout time.Duration) *GetClustersIDNodesNodeIDLogsLogNameParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get clusters ID nodes node ID logs log name params
func (o *GetClustersIDNodesNodeIDLogsLogNameParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get clusters ID nodes node ID logs log name params
func (o *GetClustersIDNodesNodeIDLogsLogNameParams) WithContext(ctx context.Context) *GetClustersIDNodesNodeIDLogsLogNameParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get clusters ID nodes node ID logs log name params
func (o *GetClustersIDNodesNodeIDLogsLogNameParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get clusters ID nodes node ID logs log name params
func (o *GetClustersIDNodesNodeIDLogsLogNameParams) WithHTTPClient(client *http.Client) *GetClustersIDNodesNodeIDLogsLogNameParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get clusters ID nodes node ID logs log name params
func (o *GetClustersIDNodesNodeIDLogsLogNameParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthorization adds the authorization to the get clusters ID nodes node ID logs log name params
func (o *GetClustersIDNodesNodeIDLogsLogNameParams) WithAuthorization(authorization string) *GetClustersIDNodesNodeIDLogsLogNameParams {
	o.SetAuthorization(authorization)
	return o
}

// SetAuthorization adds the authorization to the get clusters ID nodes node ID logs log name params
func (o *GetClustersIDNodesNodeIDLogsLogNameParams) SetAuthorization(authorization string) {
	o.Authorization = authorization
}

// WithCaseSensitive adds the caseSensitive to the get clusters ID nodes node ID logs log name params
func (o *GetClustersIDNodesNodeIDLogsLogNameParams) WithCaseSensitive(caseSensitive *bool) *GetClustersIDNodesNodeIDLogsLogNameParams {
	o.SetCaseSensitive(caseSensitive)
	return o
}

// SetCaseSensitive adds the caseSensitive to the get clusters ID nodes node ID logs log name params
func (o *GetClustersIDNodesNodeIDLogsLogNameParams) SetCaseSensitive(caseSensitive *bool) {
	o.CaseSensitive = caseSensitive
}

// WithDmesg adds the dmesg to the get clusters ID nodes node ID logs log name params
func (o *GetClustersIDNodesNodeIDLogsLogNameParams) WithDmesg(dmesg *bool) *GetClustersIDNodesNodeIDLogsLogNameParams {
	o.SetDmesg(dmesg)
	return o
}

// SetDmesg adds the dmesg to the get clusters ID nodes node ID logs log name params
func (o *GetClustersIDNodesNodeIDLogsLogNameParams) SetDmesg(dmesg *bool) {
	o.Dmesg = dmesg
}

// WithGrep adds the grep to the get clusters ID nodes node ID logs log name params
func (o *GetClustersIDNodesNodeIDLogsLogNameParams) WithGrep(grep *string) *GetClustersIDNodesNodeIDLogsLogNameParams {
	o.SetGrep(grep)
	return o
}

// SetGrep adds the grep to the get clusters ID nodes node ID logs log name params
func (o *GetClustersIDNodesNodeIDLogsLogNameParams) SetGrep(grep *string) {
	o.Grep = grep
}

// WithID adds the id to the get clusters ID nodes node ID logs log name params
func (o *GetClustersIDNodesNodeIDLogsLogNameParams) WithID(id string) *GetClustersIDNodesNodeIDLogsLogNameParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the get clusters ID nodes node ID logs log name params
func (o *GetClustersIDNodesNodeIDLogsLogNameParams) SetID(id string) {
	o.ID = id
}

// WithLines adds the lines to the get clusters ID nodes node ID logs log name params
func (o *GetClustersIDNodesNodeIDLogsLogNameParams) WithLines(lines *int64) *GetClustersIDNodesNodeIDLogsLogNameParams {
	o.SetLines(lines)
	return o
}

// SetLines adds the lines to the get clusters ID nodes node ID logs log name params
func (o *GetClustersIDNodesNodeIDLogsLogNameParams) SetLines(lines *int64) {
	o.Lines = lines
}

// WithLogName adds the logName to the get clusters ID nodes node ID logs log name params
func (o *GetClustersIDNodesNodeIDLogsLogNameParams) WithLogName(logName string) *GetClustersIDNodesNodeIDLogsLogNameParams {
	o.SetLogName(logName)
	return o
}

// SetLogName adds the logName to the get clusters ID nodes node ID logs log name params
func (o *GetClustersIDNodesNodeIDLogsLogNameParams) SetLogName(logName string) {
	o.LogName = logName
}

// WithNodeID adds the nodeID to the get clusters ID nodes node ID logs log name params
func (o *GetClustersIDNodesNodeIDLogsLogNameParams) WithNodeID(nodeID string) *GetClustersIDNodesNodeIDLogsLogNameParams {
	o.SetNodeID(nodeID)
	return o
}

// SetNodeID adds the nodeId to the get clusters ID nodes node ID logs log name params
func (o *GetClustersIDNodesNodeIDLogsLogNameParams) SetNodeID(nodeID string) {
	o.NodeID = nodeID
}

// WithOutput adds the output to the get clusters ID nodes node ID logs log name params
func (o *GetClustersIDNodesNodeIDLogsLogNameParams) WithOutput(output *string) *GetClustersIDNodesNodeIDLogsLogNameParams {
	o.SetOutput(output)
	return o
}

// SetOutput adds the output to the get clusters ID nodes node ID logs log name params
func (o *GetClustersIDNodesNodeIDLogsLogNameParams) SetOutput(output *string) {
	o.Output = output
}

// WithPriority adds the priority to the get clusters ID nodes node ID logs log name params
func (o *GetClustersIDNodesNodeIDLogsLogNameParams) WithPriority(priority *string) *GetClustersIDNodesNodeIDLogsLogNameParams {
	o.SetPriority(priority)
	return o
}

// SetPriority adds the priority to the get clusters ID nodes node ID logs log name params
func (o *GetClustersIDNodesNodeIDLogsLogNameParams) SetPriority(priority *string) {
	o.Priority = priority
}

// WithReverse adds the reverse to the get clusters ID nodes node ID logs log name params
func (o *GetClustersIDNodesNodeIDLogsLogNameParams) WithReverse(reverse *bool) *GetClustersIDNodesNodeIDLogsLogNameParams {
	o.SetReverse(reverse)
	return o
}

// SetReverse adds the reverse to the get clusters ID nodes node ID logs log name params
func (o *GetClustersIDNodesNodeIDLogsLogNameParams) SetReverse(reverse *bool) {
	o.Reverse = reverse
}

// WithSince adds the since to the get clusters ID nodes node ID logs log name params
func (o *GetClustersIDNodesNodeIDLogsLogNameParams) WithSince(since *string) *GetClustersIDNodesNodeIDLogsLogNameParams {
	o.SetSince(since)
	return o
}

// SetSince adds the since to the get clusters ID nodes node ID logs log name params
func (o *GetClustersIDNodesNodeIDLogsLogNameParams) SetSince(since *string) {
	o.Since = since
}

// WithUntil adds the until to the get clusters ID nodes node ID logs log name params
func (o *GetClustersIDNodesNodeIDLogsLogNameParams) WithUntil(until *string) *GetClustersIDNodesNodeIDLogsLogNameParams {
	o.SetUntil(until)
	return o
}

// SetUntil adds the until to the get clusters ID nodes node ID logs log name params
func (o *GetClustersIDNodesNodeIDLogsLogNameParams) SetUntil(until *string) {
	o.Until = until
}

// WriteToRequest writes these params to a swagger request
func (o *GetClustersIDNodesNodeIDLogsLogNameParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param Authorization
	if err := r.SetHeaderParam("Authorization", o.Authorization); err != nil {
		return err
	}

	if o.CaseSensitive != nil {

		// query param case_sensitive
		var qrCaseSensitive bool

		if o.CaseSensitive != nil {
			qrCaseSensitive = *o.CaseSensitive
		}
		qCaseSensitive := swag.FormatBool(qrCaseSensitive)
		if qCaseSensitive != "" {

			if err := r.SetQueryParam("case_sensitive", qCaseSensitive); err != nil {
				return err
			}
		}
	}

	if o.Dmesg != nil {

		// query param dmesg
		var qrDmesg bool

		if o.Dmesg != nil {
			qrDmesg = *o.Dmesg
		}
		qDmesg := swag.FormatBool(qrDmesg)
		if qDmesg != "" {

			if err := r.SetQueryParam("dmesg", qDmesg); err != nil {
				return err
			}
		}
	}

	if o.Grep != nil {

		// query param grep
		var qrGrep string

		if o.Grep != nil {
			qrGrep = *o.Grep
		}
		qGrep := qrGrep
		if qGrep != "" {

			if err := r.SetQueryParam("grep", qGrep); err != nil {
				return err
			}
		}
	}

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if o.Lines != nil {

		// query param lines
		var qrLines int64

		if o.Lines != nil {
			qrLines = *o.Lines
		}
		qLines := swag.FormatInt64(qrLines)
		if qLines != "" {

			if err := r.SetQueryParam("lines", qLines); err != nil {
				return err
			}
		}
	}

	// path param log_name
	if err := r.SetPathParam("log_name", o.LogName); err != nil {
		return err
	}

	// path param node_id
	if err := r.SetPathParam("node_id", o.NodeID); err != nil {
		return err
	}

	if o.Output != nil {

		// query param output
		var qrOutput string

		if o.Output != nil {
			qrOutput = *o.Output
		}
		qOutput := qrOutput
		if qOutput != "" {

			if err := r.SetQueryParam("output", qOutput); err != nil {
				return err
			}
		}
	}

	if o.Priority != nil {

		// query param priority
		var qrPriority string

		if o.Priority != nil {
			qrPriority = *o.Priority
		}
		qPriority := qrPriority
		if qPriority != "" {

			if err := r.SetQueryParam("priority", qPriority); err != nil {
				return err
			}
		}
	}

	if o.Reverse != nil {

		// query param reverse
		var qrReverse bool

		if o.Reverse != nil {
			qrReverse = *o.Reverse
		}
		qReverse := swag.FormatBool(qrReverse)
		if qReverse != "" {

			if err := r.SetQueryParam("reverse", qReverse); err != nil {
				return err
			}
		}
	}

	if o.Since != nil {

		// query param since
		var qrSince string

		if o.Since != nil {
			qrSince = *o.Since
		}
		qSince := qrSince
		if qSince != "" {

			if err := r.SetQueryParam("since", qSince); err != nil {
				return err
			}
		}
	}

	if o.Until != nil {

		// query param until
		var qrUntil string

		if o.Until != nil {
			qrUntil = *o.Until
		}
		qUntil := qrUntil
		if qUntil != "" {

			if err := r.SetQueryParam("until", qUntil); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
