// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new operations API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new operations API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteCloudAccountsID(params *DeleteCloudAccountsIDParams, opts ...ClientOption) (*DeleteCloudAccountsIDNoContent, error)

	DeleteClustersID(params *DeleteClustersIDParams, opts ...ClientOption) (*DeleteClustersIDNoContent, error)

	DeleteDatabasesID(params *DeleteDatabasesIDParams, opts ...ClientOption) (*DeleteDatabasesIDNoContent, error)

	GetCloudAccounts(params *GetCloudAccountsParams, opts ...ClientOption) (*GetCloudAccountsOK, error)

	GetCloudAccountsID(params *GetCloudAccountsIDParams, opts ...ClientOption) (*GetCloudAccountsIDOK, error)

	GetClusters(params *GetClustersParams, opts ...ClientOption) (*GetClustersOK, error)

	GetClustersID(params *GetClustersIDParams, opts ...ClientOption) (*GetClustersIDOK, error)

	GetDatabases(params *GetDatabasesParams, opts ...ClientOption) (*GetDatabasesOK, error)

	GetDatabasesID(params *GetDatabasesIDParams, opts ...ClientOption) (*GetDatabasesIDOK, error)

	PatchClustersID(params *PatchClustersIDParams, opts ...ClientOption) (*PatchClustersIDOK, error)

	PatchDatabasesID(params *PatchDatabasesIDParams, opts ...ClientOption) (*PatchDatabasesIDOK, error)

	PostCloudAccounts(params *PostCloudAccountsParams, opts ...ClientOption) (*PostCloudAccountsOK, error)

	PostClusters(params *PostClustersParams, opts ...ClientOption) (*PostClustersOK, error)

	PostDatabases(params *PostDatabasesParams, opts ...ClientOption) (*PostDatabasesOK, error)

	PostDatabasesIDReplicate(params *PostDatabasesIDReplicateParams, opts ...ClientOption) (*PostDatabasesIDReplicateOK, error)

	PostOauthToken(params *PostOauthTokenParams, opts ...ClientOption) (*PostOauthTokenOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteCloudAccountsID offboards a cloud account

Offboard a cloud account.
*/
func (a *Client) DeleteCloudAccountsID(params *DeleteCloudAccountsIDParams, opts ...ClientOption) (*DeleteCloudAccountsIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCloudAccountsIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteCloudAccountsID",
		Method:             "DELETE",
		PathPattern:        "/cloud-accounts/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteCloudAccountsIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteCloudAccountsIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteCloudAccountsID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteClustersID deletes cluster by ID

Delete the cluster with the specified ID
*/
func (a *Client) DeleteClustersID(params *DeleteClustersIDParams, opts ...ClientOption) (*DeleteClustersIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteClustersIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteClustersID",
		Method:             "DELETE",
		PathPattern:        "/clusters/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteClustersIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteClustersIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteClustersID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteDatabasesID deletes a database

Delete the database with the specified ID
*/
func (a *Client) DeleteDatabasesID(params *DeleteDatabasesIDParams, opts ...ClientOption) (*DeleteDatabasesIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDatabasesIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteDatabasesID",
		Method:             "DELETE",
		PathPattern:        "/databases/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteDatabasesIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteDatabasesIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteDatabasesID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetCloudAccounts lists cloud accounts known to pg edge

Lists cloud accounts known to pgEdge.
*/
func (a *Client) GetCloudAccounts(params *GetCloudAccountsParams, opts ...ClientOption) (*GetCloudAccountsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCloudAccountsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetCloudAccounts",
		Method:             "GET",
		PathPattern:        "/cloud-accounts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCloudAccountsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCloudAccountsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetCloudAccounts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetCloudAccountsID retrieves a cloud account

Retrieve a cloud account.
*/
func (a *Client) GetCloudAccountsID(params *GetCloudAccountsIDParams, opts ...ClientOption) (*GetCloudAccountsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCloudAccountsIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetCloudAccountsID",
		Method:             "GET",
		PathPattern:        "/cloud-accounts/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCloudAccountsIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCloudAccountsIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetCloudAccountsID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetClusters gets all clusters

Retrieve a list of clusters with optional limit and offset
*/
func (a *Client) GetClusters(params *GetClustersParams, opts ...ClientOption) (*GetClustersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClustersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetClusters",
		Method:             "GET",
		PathPattern:        "/clusters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetClustersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetClustersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetClusters: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetClustersID gets cluster by ID

Retrieve detailed information about a specific cluster
*/
func (a *Client) GetClustersID(params *GetClustersIDParams, opts ...ClientOption) (*GetClustersIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClustersIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetClustersID",
		Method:             "GET",
		PathPattern:        "/clusters/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetClustersIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetClustersIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetClustersID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetDatabases gets all databases

Retrieve a list of all databases
*/
func (a *Client) GetDatabases(params *GetDatabasesParams, opts ...ClientOption) (*GetDatabasesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDatabasesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetDatabases",
		Method:             "GET",
		PathPattern:        "/databases",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDatabasesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDatabasesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetDatabases: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetDatabasesID gets database by ID

Retrieve detailed information about a specific database
*/
func (a *Client) GetDatabasesID(params *GetDatabasesIDParams, opts ...ClientOption) (*GetDatabasesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDatabasesIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetDatabasesID",
		Method:             "GET",
		PathPattern:        "/databases/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDatabasesIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDatabasesIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetDatabasesID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchClustersID updates cluster by ID

Update the cluster with the specified ID
*/
func (a *Client) PatchClustersID(params *PatchClustersIDParams, opts ...ClientOption) (*PatchClustersIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchClustersIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchClustersID",
		Method:             "PATCH",
		PathPattern:        "/clusters/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchClustersIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchClustersIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchClustersID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchDatabasesID updates a database

Update the database with the specified ID
*/
func (a *Client) PatchDatabasesID(params *PatchDatabasesIDParams, opts ...ClientOption) (*PatchDatabasesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchDatabasesIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchDatabasesID",
		Method:             "PATCH",
		PathPattern:        "/databases/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchDatabasesIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchDatabasesIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchDatabasesID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostCloudAccounts onboards a new cloud account

Onboard a new cloud account.
*/
func (a *Client) PostCloudAccounts(params *PostCloudAccountsParams, opts ...ClientOption) (*PostCloudAccountsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostCloudAccountsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostCloudAccounts",
		Method:             "POST",
		PathPattern:        "/cloud-accounts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostCloudAccountsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostCloudAccountsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostCloudAccounts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostClusters creates a new cluster

Create a new cluster with the specified options
*/
func (a *Client) PostClusters(params *PostClustersParams, opts ...ClientOption) (*PostClustersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostClustersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostClusters",
		Method:             "POST",
		PathPattern:        "/clusters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostClustersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostClustersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostClusters: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostDatabases creates a new database

Create a new database with the specified options
*/
func (a *Client) PostDatabases(params *PostDatabasesParams, opts ...ClientOption) (*PostDatabasesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDatabasesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostDatabases",
		Method:             "POST",
		PathPattern:        "/databases",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostDatabasesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDatabasesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostDatabases: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostDatabasesIDReplicate replicates database

Replicate the database with the specified ID
*/
func (a *Client) PostDatabasesIDReplicate(params *PostDatabasesIDReplicateParams, opts ...ClientOption) (*PostDatabasesIDReplicateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDatabasesIDReplicateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostDatabasesIDReplicate",
		Method:             "POST",
		PathPattern:        "/databases/{id}/replicate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostDatabasesIDReplicateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDatabasesIDReplicateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostDatabasesIDReplicate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostOauthToken obtains o auth token

Get an OAuth token using client credentials
*/
func (a *Client) PostOauthToken(params *PostOauthTokenParams, opts ...ClientOption) (*PostOauthTokenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostOauthTokenParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostOauthToken",
		Method:             "POST",
		PathPattern:        "/oauth/token",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostOauthTokenReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostOauthTokenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostOauthToken: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
