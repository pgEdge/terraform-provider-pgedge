// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetClustersIDNodesParams creates a new GetClustersIDNodesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetClustersIDNodesParams() *GetClustersIDNodesParams {
	return &GetClustersIDNodesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetClustersIDNodesParamsWithTimeout creates a new GetClustersIDNodesParams object
// with the ability to set a timeout on a request.
func NewGetClustersIDNodesParamsWithTimeout(timeout time.Duration) *GetClustersIDNodesParams {
	return &GetClustersIDNodesParams{
		timeout: timeout,
	}
}

// NewGetClustersIDNodesParamsWithContext creates a new GetClustersIDNodesParams object
// with the ability to set a context for a request.
func NewGetClustersIDNodesParamsWithContext(ctx context.Context) *GetClustersIDNodesParams {
	return &GetClustersIDNodesParams{
		Context: ctx,
	}
}

// NewGetClustersIDNodesParamsWithHTTPClient creates a new GetClustersIDNodesParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetClustersIDNodesParamsWithHTTPClient(client *http.Client) *GetClustersIDNodesParams {
	return &GetClustersIDNodesParams{
		HTTPClient: client,
	}
}

/*
GetClustersIDNodesParams contains all the parameters to send to the API endpoint

	for the get clusters ID nodes operation.

	Typically these are written to a http.Request.
*/
type GetClustersIDNodesParams struct {

	// Authorization.
	//
	// Format: Bearer {access_token}
	Authorization string

	/* ID.

	   ID of the cluster.

	   Format: uuid
	*/
	ID strfmt.UUID

	/* NearLat.

	   Latitude of the caller, when sorting by distance
	*/
	NearLat *string

	/* NearLon.

	   Longitude of the caller, when sorting by distance
	*/
	NearLon *string

	/* OrderBy.

	   Order by specification
	*/
	OrderBy *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get clusters ID nodes params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetClustersIDNodesParams) WithDefaults() *GetClustersIDNodesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get clusters ID nodes params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetClustersIDNodesParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get clusters ID nodes params
func (o *GetClustersIDNodesParams) WithTimeout(timeout time.Duration) *GetClustersIDNodesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get clusters ID nodes params
func (o *GetClustersIDNodesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get clusters ID nodes params
func (o *GetClustersIDNodesParams) WithContext(ctx context.Context) *GetClustersIDNodesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get clusters ID nodes params
func (o *GetClustersIDNodesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get clusters ID nodes params
func (o *GetClustersIDNodesParams) WithHTTPClient(client *http.Client) *GetClustersIDNodesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get clusters ID nodes params
func (o *GetClustersIDNodesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthorization adds the authorization to the get clusters ID nodes params
func (o *GetClustersIDNodesParams) WithAuthorization(authorization string) *GetClustersIDNodesParams {
	o.SetAuthorization(authorization)
	return o
}

// SetAuthorization adds the authorization to the get clusters ID nodes params
func (o *GetClustersIDNodesParams) SetAuthorization(authorization string) {
	o.Authorization = authorization
}

// WithID adds the id to the get clusters ID nodes params
func (o *GetClustersIDNodesParams) WithID(id strfmt.UUID) *GetClustersIDNodesParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the get clusters ID nodes params
func (o *GetClustersIDNodesParams) SetID(id strfmt.UUID) {
	o.ID = id
}

// WithNearLat adds the nearLat to the get clusters ID nodes params
func (o *GetClustersIDNodesParams) WithNearLat(nearLat *string) *GetClustersIDNodesParams {
	o.SetNearLat(nearLat)
	return o
}

// SetNearLat adds the nearLat to the get clusters ID nodes params
func (o *GetClustersIDNodesParams) SetNearLat(nearLat *string) {
	o.NearLat = nearLat
}

// WithNearLon adds the nearLon to the get clusters ID nodes params
func (o *GetClustersIDNodesParams) WithNearLon(nearLon *string) *GetClustersIDNodesParams {
	o.SetNearLon(nearLon)
	return o
}

// SetNearLon adds the nearLon to the get clusters ID nodes params
func (o *GetClustersIDNodesParams) SetNearLon(nearLon *string) {
	o.NearLon = nearLon
}

// WithOrderBy adds the orderBy to the get clusters ID nodes params
func (o *GetClustersIDNodesParams) WithOrderBy(orderBy *string) *GetClustersIDNodesParams {
	o.SetOrderBy(orderBy)
	return o
}

// SetOrderBy adds the orderBy to the get clusters ID nodes params
func (o *GetClustersIDNodesParams) SetOrderBy(orderBy *string) {
	o.OrderBy = orderBy
}

// WriteToRequest writes these params to a swagger request
func (o *GetClustersIDNodesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param Authorization
	if err := r.SetHeaderParam("Authorization", o.Authorization); err != nil {
		return err
	}

	// path param id
	if err := r.SetPathParam("id", o.ID.String()); err != nil {
		return err
	}

	if o.NearLat != nil {

		// query param near_lat
		var qrNearLat string

		if o.NearLat != nil {
			qrNearLat = *o.NearLat
		}
		qNearLat := qrNearLat
		if qNearLat != "" {

			if err := r.SetQueryParam("near_lat", qNearLat); err != nil {
				return err
			}
		}
	}

	if o.NearLon != nil {

		// query param near_lon
		var qrNearLon string

		if o.NearLon != nil {
			qrNearLon = *o.NearLon
		}
		qNearLon := qrNearLon
		if qNearLon != "" {

			if err := r.SetQueryParam("near_lon", qNearLon); err != nil {
				return err
			}
		}
	}

	if o.OrderBy != nil {

		// query param order_by
		var qrOrderBy string

		if o.OrderBy != nil {
			qrOrderBy = *o.OrderBy
		}
		qOrderBy := qrOrderBy
		if qOrderBy != "" {

			if err := r.SetQueryParam("order_by", qOrderBy); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
