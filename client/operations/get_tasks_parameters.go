// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetTasksParams creates a new GetTasksParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetTasksParams() *GetTasksParams {
	return &GetTasksParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetTasksParamsWithTimeout creates a new GetTasksParams object
// with the ability to set a timeout on a request.
func NewGetTasksParamsWithTimeout(timeout time.Duration) *GetTasksParams {
	return &GetTasksParams{
		timeout: timeout,
	}
}

// NewGetTasksParamsWithContext creates a new GetTasksParams object
// with the ability to set a context for a request.
func NewGetTasksParamsWithContext(ctx context.Context) *GetTasksParams {
	return &GetTasksParams{
		Context: ctx,
	}
}

// NewGetTasksParamsWithHTTPClient creates a new GetTasksParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetTasksParamsWithHTTPClient(client *http.Client) *GetTasksParams {
	return &GetTasksParams{
		HTTPClient: client,
	}
}

/*
GetTasksParams contains all the parameters to send to the API endpoint

	for the get tasks operation.

	Typically these are written to a http.Request.
*/
type GetTasksParams struct {

	// Authorization.
	//
	// Format: Bearer {access_token}
	Authorization string

	/* ID.

	   Filter tasks by id.
	*/
	ID *string

	/* Limit.

	   Maximum number of results to return.
	*/
	Limit *int64

	/* Name.

	   Filter tasks by name.
	*/
	Name *string

	/* Offset.

	   Offset into the results, for pagination.
	*/
	Offset *int64

	/* Status.

	   Filter tasks by status.
	*/
	Status *string

	/* SubjectID.

	   Filter tasks by subject id.
	*/
	SubjectID *string

	/* SubjectKind.

	   Filter tasks by kind.
	*/
	SubjectKind *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get tasks params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetTasksParams) WithDefaults() *GetTasksParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get tasks params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetTasksParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get tasks params
func (o *GetTasksParams) WithTimeout(timeout time.Duration) *GetTasksParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get tasks params
func (o *GetTasksParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get tasks params
func (o *GetTasksParams) WithContext(ctx context.Context) *GetTasksParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get tasks params
func (o *GetTasksParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get tasks params
func (o *GetTasksParams) WithHTTPClient(client *http.Client) *GetTasksParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get tasks params
func (o *GetTasksParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthorization adds the authorization to the get tasks params
func (o *GetTasksParams) WithAuthorization(authorization string) *GetTasksParams {
	o.SetAuthorization(authorization)
	return o
}

// SetAuthorization adds the authorization to the get tasks params
func (o *GetTasksParams) SetAuthorization(authorization string) {
	o.Authorization = authorization
}

// WithID adds the id to the get tasks params
func (o *GetTasksParams) WithID(id *string) *GetTasksParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the get tasks params
func (o *GetTasksParams) SetID(id *string) {
	o.ID = id
}

// WithLimit adds the limit to the get tasks params
func (o *GetTasksParams) WithLimit(limit *int64) *GetTasksParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get tasks params
func (o *GetTasksParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithName adds the name to the get tasks params
func (o *GetTasksParams) WithName(name *string) *GetTasksParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the get tasks params
func (o *GetTasksParams) SetName(name *string) {
	o.Name = name
}

// WithOffset adds the offset to the get tasks params
func (o *GetTasksParams) WithOffset(offset *int64) *GetTasksParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the get tasks params
func (o *GetTasksParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithStatus adds the status to the get tasks params
func (o *GetTasksParams) WithStatus(status *string) *GetTasksParams {
	o.SetStatus(status)
	return o
}

// SetStatus adds the status to the get tasks params
func (o *GetTasksParams) SetStatus(status *string) {
	o.Status = status
}

// WithSubjectID adds the subjectID to the get tasks params
func (o *GetTasksParams) WithSubjectID(subjectID *string) *GetTasksParams {
	o.SetSubjectID(subjectID)
	return o
}

// SetSubjectID adds the subjectId to the get tasks params
func (o *GetTasksParams) SetSubjectID(subjectID *string) {
	o.SubjectID = subjectID
}

// WithSubjectKind adds the subjectKind to the get tasks params
func (o *GetTasksParams) WithSubjectKind(subjectKind *string) *GetTasksParams {
	o.SetSubjectKind(subjectKind)
	return o
}

// SetSubjectKind adds the subjectKind to the get tasks params
func (o *GetTasksParams) SetSubjectKind(subjectKind *string) {
	o.SubjectKind = subjectKind
}

// WriteToRequest writes these params to a swagger request
func (o *GetTasksParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param Authorization
	if err := r.SetHeaderParam("Authorization", o.Authorization); err != nil {
		return err
	}

	if o.ID != nil {

		// query param id
		var qrID string

		if o.ID != nil {
			qrID = *o.ID
		}
		qID := qrID
		if qID != "" {

			if err := r.SetQueryParam("id", qID); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Name != nil {

		// query param name
		var qrName string

		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64

		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {

			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}
	}

	if o.Status != nil {

		// query param status
		var qrStatus string

		if o.Status != nil {
			qrStatus = *o.Status
		}
		qStatus := qrStatus
		if qStatus != "" {

			if err := r.SetQueryParam("status", qStatus); err != nil {
				return err
			}
		}
	}

	if o.SubjectID != nil {

		// query param subject_id
		var qrSubjectID string

		if o.SubjectID != nil {
			qrSubjectID = *o.SubjectID
		}
		qSubjectID := qrSubjectID
		if qSubjectID != "" {

			if err := r.SetQueryParam("subject_id", qSubjectID); err != nil {
				return err
			}
		}
	}

	if o.SubjectKind != nil {

		// query param subject_kind
		var qrSubjectKind string

		if o.SubjectKind != nil {
			qrSubjectKind = *o.SubjectKind
		}
		qSubjectKind := qrSubjectKind
		if qSubjectKind != "" {

			if err := r.SetQueryParam("subject_kind", qSubjectKind); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
