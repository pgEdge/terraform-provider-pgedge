// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DatabaseUpdateRequest database update request
//
// swagger:model DatabaseUpdateRequest
type DatabaseUpdateRequest struct {

	// extensions
	Extensions *DatabaseUpdateRequestExtensions `json:"extensions,omitempty"`

	// options
	Options []string `json:"options"`
}

// Validate validates this database update request
func (m *DatabaseUpdateRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExtensions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DatabaseUpdateRequest) validateExtensions(formats strfmt.Registry) error {
	if swag.IsZero(m.Extensions) { // not required
		return nil
	}

	if m.Extensions != nil {
		if err := m.Extensions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("extensions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("extensions")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this database update request based on the context it is used
func (m *DatabaseUpdateRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateExtensions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DatabaseUpdateRequest) contextValidateExtensions(ctx context.Context, formats strfmt.Registry) error {

	if m.Extensions != nil {

		if swag.IsZero(m.Extensions) { // not required
			return nil
		}

		if err := m.Extensions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("extensions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("extensions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DatabaseUpdateRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DatabaseUpdateRequest) UnmarshalBinary(b []byte) error {
	var res DatabaseUpdateRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DatabaseUpdateRequestExtensions database update request extensions
//
// swagger:model DatabaseUpdateRequestExtensions
type DatabaseUpdateRequestExtensions struct {

	// auto manage
	AutoManage bool `json:"auto_manage,omitempty"`

	// available
	Available []string `json:"available"`

	// requested
	Requested []string `json:"requested"`
}

// Validate validates this database update request extensions
func (m *DatabaseUpdateRequestExtensions) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this database update request extensions based on context it is used
func (m *DatabaseUpdateRequestExtensions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DatabaseUpdateRequestExtensions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DatabaseUpdateRequestExtensions) UnmarshalBinary(b []byte) error {
	var res DatabaseUpdateRequestExtensions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
