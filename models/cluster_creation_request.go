// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ClusterCreationRequest cluster creation request
//
// swagger:model ClusterCreationRequest
type ClusterCreationRequest struct {

	// cloud account id
	CloudAccountID string `json:"cloud_account_id,omitempty"`

	// firewall
	Firewall *ClusterCreationRequestFirewall `json:"firewall,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// node groups
	NodeGroups *ClusterCreationRequestNodeGroups `json:"node_groups,omitempty"`
}

// Validate validates this cluster creation request
func (m *ClusterCreationRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFirewall(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodeGroups(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterCreationRequest) validateFirewall(formats strfmt.Registry) error {
	if swag.IsZero(m.Firewall) { // not required
		return nil
	}

	if m.Firewall != nil {
		if err := m.Firewall.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("firewall")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("firewall")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterCreationRequest) validateNodeGroups(formats strfmt.Registry) error {
	if swag.IsZero(m.NodeGroups) { // not required
		return nil
	}

	if m.NodeGroups != nil {
		if err := m.NodeGroups.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("node_groups")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("node_groups")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this cluster creation request based on the context it is used
func (m *ClusterCreationRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFirewall(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNodeGroups(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterCreationRequest) contextValidateFirewall(ctx context.Context, formats strfmt.Registry) error {

	if m.Firewall != nil {

		if swag.IsZero(m.Firewall) { // not required
			return nil
		}

		if err := m.Firewall.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("firewall")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("firewall")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterCreationRequest) contextValidateNodeGroups(ctx context.Context, formats strfmt.Registry) error {

	if m.NodeGroups != nil {

		if swag.IsZero(m.NodeGroups) { // not required
			return nil
		}

		if err := m.NodeGroups.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("node_groups")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("node_groups")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClusterCreationRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterCreationRequest) UnmarshalBinary(b []byte) error {
	var res ClusterCreationRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ClusterCreationRequestFirewall cluster creation request firewall
//
// swagger:model ClusterCreationRequestFirewall
type ClusterCreationRequestFirewall struct {

	// rules
	Rules []*ClusterCreationRequestFirewallRulesItems0 `json:"rules"`
}

// Validate validates this cluster creation request firewall
func (m *ClusterCreationRequestFirewall) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRules(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterCreationRequestFirewall) validateRules(formats strfmt.Registry) error {
	if swag.IsZero(m.Rules) { // not required
		return nil
	}

	for i := 0; i < len(m.Rules); i++ {
		if swag.IsZero(m.Rules[i]) { // not required
			continue
		}

		if m.Rules[i] != nil {
			if err := m.Rules[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("firewall" + "." + "rules" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("firewall" + "." + "rules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this cluster creation request firewall based on the context it is used
func (m *ClusterCreationRequestFirewall) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRules(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterCreationRequestFirewall) contextValidateRules(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Rules); i++ {

		if m.Rules[i] != nil {

			if swag.IsZero(m.Rules[i]) { // not required
				return nil
			}

			if err := m.Rules[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("firewall" + "." + "rules" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("firewall" + "." + "rules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClusterCreationRequestFirewall) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterCreationRequestFirewall) UnmarshalBinary(b []byte) error {
	var res ClusterCreationRequestFirewall
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ClusterCreationRequestFirewallRulesItems0 cluster creation request firewall rules items0
//
// swagger:model ClusterCreationRequestFirewallRulesItems0
type ClusterCreationRequestFirewallRulesItems0 struct {

	// port
	Port int64 `json:"port,omitempty"`

	// sources
	Sources []string `json:"sources"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this cluster creation request firewall rules items0
func (m *ClusterCreationRequestFirewallRulesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this cluster creation request firewall rules items0 based on context it is used
func (m *ClusterCreationRequestFirewallRulesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ClusterCreationRequestFirewallRulesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterCreationRequestFirewallRulesItems0) UnmarshalBinary(b []byte) error {
	var res ClusterCreationRequestFirewallRulesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ClusterCreationRequestNodeGroups cluster creation request node groups
//
// swagger:model ClusterCreationRequestNodeGroups
type ClusterCreationRequestNodeGroups struct {

	// aws
	Aws []*ClusterCreationRequestNodeGroupsAwsItems0 `json:"aws"`
}

// Validate validates this cluster creation request node groups
func (m *ClusterCreationRequestNodeGroups) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAws(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterCreationRequestNodeGroups) validateAws(formats strfmt.Registry) error {
	if swag.IsZero(m.Aws) { // not required
		return nil
	}

	for i := 0; i < len(m.Aws); i++ {
		if swag.IsZero(m.Aws[i]) { // not required
			continue
		}

		if m.Aws[i] != nil {
			if err := m.Aws[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("node_groups" + "." + "aws" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("node_groups" + "." + "aws" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this cluster creation request node groups based on the context it is used
func (m *ClusterCreationRequestNodeGroups) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAws(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterCreationRequestNodeGroups) contextValidateAws(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Aws); i++ {

		if m.Aws[i] != nil {

			if swag.IsZero(m.Aws[i]) { // not required
				return nil
			}

			if err := m.Aws[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("node_groups" + "." + "aws" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("node_groups" + "." + "aws" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClusterCreationRequestNodeGroups) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterCreationRequestNodeGroups) UnmarshalBinary(b []byte) error {
	var res ClusterCreationRequestNodeGroups
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ClusterCreationRequestNodeGroupsAwsItems0 cluster creation request node groups aws items0
//
// swagger:model ClusterCreationRequestNodeGroupsAwsItems0
type ClusterCreationRequestNodeGroupsAwsItems0 struct {

	// nodes
	Nodes []*ClusterCreationRequestNodeGroupsAwsItems0NodesItems0 `json:"nodes"`

	// region
	Region string `json:"region,omitempty"`
}

// Validate validates this cluster creation request node groups aws items0
func (m *ClusterCreationRequestNodeGroupsAwsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNodes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterCreationRequestNodeGroupsAwsItems0) validateNodes(formats strfmt.Registry) error {
	if swag.IsZero(m.Nodes) { // not required
		return nil
	}

	for i := 0; i < len(m.Nodes); i++ {
		if swag.IsZero(m.Nodes[i]) { // not required
			continue
		}

		if m.Nodes[i] != nil {
			if err := m.Nodes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nodes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nodes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this cluster creation request node groups aws items0 based on the context it is used
func (m *ClusterCreationRequestNodeGroupsAwsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateNodes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterCreationRequestNodeGroupsAwsItems0) contextValidateNodes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Nodes); i++ {

		if m.Nodes[i] != nil {

			if swag.IsZero(m.Nodes[i]) { // not required
				return nil
			}

			if err := m.Nodes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nodes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nodes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClusterCreationRequestNodeGroupsAwsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterCreationRequestNodeGroupsAwsItems0) UnmarshalBinary(b []byte) error {
	var res ClusterCreationRequestNodeGroupsAwsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ClusterCreationRequestNodeGroupsAwsItems0NodesItems0 cluster creation request node groups aws items0 nodes items0
//
// swagger:model ClusterCreationRequestNodeGroupsAwsItems0NodesItems0
type ClusterCreationRequestNodeGroupsAwsItems0NodesItems0 struct {

	// display name
	DisplayName string `json:"display_name,omitempty"`

	// is active
	IsActive bool `json:"is_active,omitempty"`
}

// Validate validates this cluster creation request node groups aws items0 nodes items0
func (m *ClusterCreationRequestNodeGroupsAwsItems0NodesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this cluster creation request node groups aws items0 nodes items0 based on context it is used
func (m *ClusterCreationRequestNodeGroupsAwsItems0NodesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ClusterCreationRequestNodeGroupsAwsItems0NodesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterCreationRequestNodeGroupsAwsItems0NodesItems0) UnmarshalBinary(b []byte) error {
	var res ClusterCreationRequestNodeGroupsAwsItems0NodesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
