// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ClusterCreationRequest cluster creation request
//
// swagger:model ClusterCreationRequest
type ClusterCreationRequest struct {

	// cloud account
	CloudAccount *ClusterCreationRequestCloudAccount `json:"cloud_account,omitempty"`

	// cloud account id
	CloudAccountID string `json:"cloud_account_id,omitempty"`

	// firewall rules
	FirewallRules []*FirewallRule `json:"firewall_rules"`

	// name
	Name string `json:"name,omitempty"`

	// networks
	Networks []*Network `json:"networks"`

	// node location
	NodeLocation string `json:"node_location,omitempty"`

	// nodes
	Nodes []*Node `json:"nodes"`

	// regions
	Regions []string `json:"regions"`

	// resource tags
	ResourceTags map[string]string `json:"resource_tags,omitempty"`

	// ssh key id
	SSHKeyID string `json:"ssh_key_id,omitempty"`
}

// Validate validates this cluster creation request
func (m *ClusterCreationRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCloudAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFirewallRules(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterCreationRequest) validateCloudAccount(formats strfmt.Registry) error {
	if swag.IsZero(m.CloudAccount) { // not required
		return nil
	}

	if m.CloudAccount != nil {
		if err := m.CloudAccount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloud_account")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cloud_account")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterCreationRequest) validateFirewallRules(formats strfmt.Registry) error {
	if swag.IsZero(m.FirewallRules) { // not required
		return nil
	}

	for i := 0; i < len(m.FirewallRules); i++ {
		if swag.IsZero(m.FirewallRules[i]) { // not required
			continue
		}

		if m.FirewallRules[i] != nil {
			if err := m.FirewallRules[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("firewall_rules" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("firewall_rules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ClusterCreationRequest) validateNetworks(formats strfmt.Registry) error {
	if swag.IsZero(m.Networks) { // not required
		return nil
	}

	for i := 0; i < len(m.Networks); i++ {
		if swag.IsZero(m.Networks[i]) { // not required
			continue
		}

		if m.Networks[i] != nil {
			if err := m.Networks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("networks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("networks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ClusterCreationRequest) validateNodes(formats strfmt.Registry) error {
	if swag.IsZero(m.Nodes) { // not required
		return nil
	}

	for i := 0; i < len(m.Nodes); i++ {
		if swag.IsZero(m.Nodes[i]) { // not required
			continue
		}

		if m.Nodes[i] != nil {
			if err := m.Nodes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nodes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nodes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this cluster creation request based on the context it is used
func (m *ClusterCreationRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCloudAccount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFirewallRules(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNetworks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNodes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterCreationRequest) contextValidateCloudAccount(ctx context.Context, formats strfmt.Registry) error {

	if m.CloudAccount != nil {

		if swag.IsZero(m.CloudAccount) { // not required
			return nil
		}

		if err := m.CloudAccount.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloud_account")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cloud_account")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterCreationRequest) contextValidateFirewallRules(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.FirewallRules); i++ {

		if m.FirewallRules[i] != nil {

			if swag.IsZero(m.FirewallRules[i]) { // not required
				return nil
			}

			if err := m.FirewallRules[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("firewall_rules" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("firewall_rules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ClusterCreationRequest) contextValidateNetworks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Networks); i++ {

		if m.Networks[i] != nil {

			if swag.IsZero(m.Networks[i]) { // not required
				return nil
			}

			if err := m.Networks[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("networks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("networks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ClusterCreationRequest) contextValidateNodes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Nodes); i++ {

		if m.Nodes[i] != nil {

			if swag.IsZero(m.Nodes[i]) { // not required
				return nil
			}

			if err := m.Nodes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nodes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nodes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClusterCreationRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterCreationRequest) UnmarshalBinary(b []byte) error {
	var res ClusterCreationRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ClusterCreationRequestCloudAccount cluster creation request cloud account
//
// swagger:model ClusterCreationRequestCloudAccount
type ClusterCreationRequestCloudAccount struct {

	// id
	ID string `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this cluster creation request cloud account
func (m *ClusterCreationRequestCloudAccount) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this cluster creation request cloud account based on context it is used
func (m *ClusterCreationRequestCloudAccount) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ClusterCreationRequestCloudAccount) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterCreationRequestCloudAccount) UnmarshalBinary(b []byte) error {
	var res ClusterCreationRequestCloudAccount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
