// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ClusterDetails cluster details
//
// swagger:model ClusterDetails
type ClusterDetails struct {

	// aws
	Aws *ClusterDetailsAws `json:"aws,omitempty"`

	// cloud account id
	CloudAccountID string `json:"cloud_account_id,omitempty"`

	// created at
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// database
	Database *ClusterDetailsDatabase `json:"database,omitempty"`

	// firewall
	Firewall *ClusterDetailsFirewall `json:"firewall,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// node groups
	NodeGroups *ClusterDetailsNodeGroups `json:"node_groups,omitempty"`

	// status
	Status string `json:"status,omitempty"`
}

// Validate validates this cluster details
func (m *ClusterDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAws(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDatabase(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFirewall(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodeGroups(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterDetails) validateAws(formats strfmt.Registry) error {
	if swag.IsZero(m.Aws) { // not required
		return nil
	}

	if m.Aws != nil {
		if err := m.Aws.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("aws")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("aws")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterDetails) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ClusterDetails) validateDatabase(formats strfmt.Registry) error {
	if swag.IsZero(m.Database) { // not required
		return nil
	}

	if m.Database != nil {
		if err := m.Database.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("database")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("database")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterDetails) validateFirewall(formats strfmt.Registry) error {
	if swag.IsZero(m.Firewall) { // not required
		return nil
	}

	if m.Firewall != nil {
		if err := m.Firewall.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("firewall")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("firewall")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterDetails) validateNodeGroups(formats strfmt.Registry) error {
	if swag.IsZero(m.NodeGroups) { // not required
		return nil
	}

	if m.NodeGroups != nil {
		if err := m.NodeGroups.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("node_groups")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("node_groups")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this cluster details based on the context it is used
func (m *ClusterDetails) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAws(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDatabase(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFirewall(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNodeGroups(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterDetails) contextValidateAws(ctx context.Context, formats strfmt.Registry) error {

	if m.Aws != nil {

		if swag.IsZero(m.Aws) { // not required
			return nil
		}

		if err := m.Aws.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("aws")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("aws")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterDetails) contextValidateDatabase(ctx context.Context, formats strfmt.Registry) error {

	if m.Database != nil {

		if swag.IsZero(m.Database) { // not required
			return nil
		}

		if err := m.Database.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("database")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("database")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterDetails) contextValidateFirewall(ctx context.Context, formats strfmt.Registry) error {

	if m.Firewall != nil {

		if swag.IsZero(m.Firewall) { // not required
			return nil
		}

		if err := m.Firewall.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("firewall")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("firewall")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterDetails) contextValidateNodeGroups(ctx context.Context, formats strfmt.Registry) error {

	if m.NodeGroups != nil {

		if swag.IsZero(m.NodeGroups) { // not required
			return nil
		}

		if err := m.NodeGroups.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("node_groups")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("node_groups")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClusterDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterDetails) UnmarshalBinary(b []byte) error {
	var res ClusterDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ClusterDetailsAws cluster details aws
//
// swagger:model ClusterDetailsAws
type ClusterDetailsAws struct {

	// role arn
	RoleArn string `json:"role_arn,omitempty"`
}

// Validate validates this cluster details aws
func (m *ClusterDetailsAws) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this cluster details aws based on context it is used
func (m *ClusterDetailsAws) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ClusterDetailsAws) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterDetailsAws) UnmarshalBinary(b []byte) error {
	var res ClusterDetailsAws
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ClusterDetailsDatabase cluster details database
//
// swagger:model ClusterDetailsDatabase
type ClusterDetailsDatabase struct {

	// name
	Name string `json:"name,omitempty"`

	// pg version
	PgVersion string `json:"pg_version,omitempty"`

	// scripts
	Scripts interface{} `json:"scripts,omitempty"`

	// username
	Username string `json:"username,omitempty"`
}

// Validate validates this cluster details database
func (m *ClusterDetailsDatabase) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this cluster details database based on context it is used
func (m *ClusterDetailsDatabase) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ClusterDetailsDatabase) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterDetailsDatabase) UnmarshalBinary(b []byte) error {
	var res ClusterDetailsDatabase
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ClusterDetailsFirewall cluster details firewall
//
// swagger:model ClusterDetailsFirewall
type ClusterDetailsFirewall struct {

	// rules
	Rules []*ClusterDetailsFirewallRulesItems0 `json:"rules"`
}

// Validate validates this cluster details firewall
func (m *ClusterDetailsFirewall) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRules(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterDetailsFirewall) validateRules(formats strfmt.Registry) error {
	if swag.IsZero(m.Rules) { // not required
		return nil
	}

	for i := 0; i < len(m.Rules); i++ {
		if swag.IsZero(m.Rules[i]) { // not required
			continue
		}

		if m.Rules[i] != nil {
			if err := m.Rules[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("firewall" + "." + "rules" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("firewall" + "." + "rules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this cluster details firewall based on the context it is used
func (m *ClusterDetailsFirewall) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRules(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterDetailsFirewall) contextValidateRules(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Rules); i++ {

		if m.Rules[i] != nil {

			if swag.IsZero(m.Rules[i]) { // not required
				return nil
			}

			if err := m.Rules[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("firewall" + "." + "rules" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("firewall" + "." + "rules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClusterDetailsFirewall) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterDetailsFirewall) UnmarshalBinary(b []byte) error {
	var res ClusterDetailsFirewall
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ClusterDetailsFirewallRulesItems0 cluster details firewall rules items0
//
// swagger:model ClusterDetailsFirewallRulesItems0
type ClusterDetailsFirewallRulesItems0 struct {

	// port
	Port int64 `json:"port,omitempty"`

	// sources
	Sources []string `json:"sources"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this cluster details firewall rules items0
func (m *ClusterDetailsFirewallRulesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this cluster details firewall rules items0 based on context it is used
func (m *ClusterDetailsFirewallRulesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ClusterDetailsFirewallRulesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterDetailsFirewallRulesItems0) UnmarshalBinary(b []byte) error {
	var res ClusterDetailsFirewallRulesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ClusterDetailsNodeGroups cluster details node groups
//
// swagger:model ClusterDetailsNodeGroups
type ClusterDetailsNodeGroups struct {

	// aws
	Aws []interface{} `json:"aws"`

	// azure
	Azure []interface{} `json:"azure"`

	// google
	Google []interface{} `json:"google"`
}

// Validate validates this cluster details node groups
func (m *ClusterDetailsNodeGroups) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this cluster details node groups based on context it is used
func (m *ClusterDetailsNodeGroups) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ClusterDetailsNodeGroups) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterDetailsNodeGroups) UnmarshalBinary(b []byte) error {
	var res ClusterDetailsNodeGroups
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
