// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NodeGroup node group
//
// swagger:model NodeGroup
type NodeGroup struct {

	// availability zones
	AvailabilityZones []string `json:"availability_zones"`

	// cidr
	Cidr string `json:"cidr,omitempty"`

	// instance type
	InstanceType string `json:"instance_type,omitempty"`

	// node location
	NodeLocation string `json:"node_location,omitempty"`

	// nodes
	Nodes []*NodeGroupNodesItems0 `json:"nodes"`

	// private subnets
	PrivateSubnets []string `json:"private_subnets"`

	// public subnets
	PublicSubnets []string `json:"public_subnets"`

	// region
	Region string `json:"region,omitempty"`

	// volume iops
	VolumeIops int64 `json:"volume_iops,omitempty"`

	// volume size
	VolumeSize int64 `json:"volume_size,omitempty"`

	// volume type
	VolumeType string `json:"volume_type,omitempty"`
}

// Validate validates this node group
func (m *NodeGroup) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNodes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NodeGroup) validateNodes(formats strfmt.Registry) error {
	if swag.IsZero(m.Nodes) { // not required
		return nil
	}

	for i := 0; i < len(m.Nodes); i++ {
		if swag.IsZero(m.Nodes[i]) { // not required
			continue
		}

		if m.Nodes[i] != nil {
			if err := m.Nodes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nodes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nodes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this node group based on the context it is used
func (m *NodeGroup) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateNodes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NodeGroup) contextValidateNodes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Nodes); i++ {

		if m.Nodes[i] != nil {

			if swag.IsZero(m.Nodes[i]) { // not required
				return nil
			}

			if err := m.Nodes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nodes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nodes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *NodeGroup) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NodeGroup) UnmarshalBinary(b []byte) error {
	var res NodeGroup
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// NodeGroupNodesItems0 node group nodes items0
//
// swagger:model NodeGroupNodesItems0
type NodeGroupNodesItems0 struct {

	// display name
	DisplayName string `json:"display_name,omitempty"`

	// ip address
	IPAddress string `json:"ip_address,omitempty"`

	// is active
	IsActive bool `json:"is_active,omitempty"`
}

// Validate validates this node group nodes items0
func (m *NodeGroupNodesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this node group nodes items0 based on context it is used
func (m *NodeGroupNodesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *NodeGroupNodesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NodeGroupNodesItems0) UnmarshalBinary(b []byte) error {
	var res NodeGroupNodesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
